
/Users/joshuabuck/git/particle-edge-impulse/pei/target/5.3.1/p2/pei.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fe000  085fe000  0000e000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fe018  085fe018  0000e018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fe7f0  085fe088  0000e7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00001800  023fe800  085fe090  0000e800  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  02400000  02400000  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  02400000  02400000  00020000  2**0
                  CONTENTS
  6 .data         000001c0  1007ace0  085ff890  0001ace0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  1007aea0  1007aea0  0002aea0  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffa50  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000564  085ffa54  085ffa54  0001fa54  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fa54  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   000da0f0  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000d089  00000000  00000000  000fa0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003113f  00000000  00000000  00107179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002118  00000000  00000000  001382b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000097e8  00000000  00000000  0013a3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001b8ab  00000000  00000000  00143bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002e9b3  00000000  00000000  0015f463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c15fe  00000000  00000000  0018de16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005e6c  00000000  00000000  0024f414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fe018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fe018:	480e      	ldr	r0, [pc, #56]	; (85fe054 <module_user_pre_init+0x3c>)
 85fe01a:	490f      	ldr	r1, [pc, #60]	; (85fe058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fe01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fe01e:	4288      	cmp	r0, r1
 85fe020:	d005      	beq.n	85fe02e <module_user_pre_init+0x16>
 85fe022:	4a0e      	ldr	r2, [pc, #56]	; (85fe05c <module_user_pre_init+0x44>)
 85fe024:	4282      	cmp	r2, r0
 85fe026:	d002      	beq.n	85fe02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fe028:	4b0d      	ldr	r3, [pc, #52]	; (85fe060 <module_user_pre_init+0x48>)
 85fe02a:	1a12      	subs	r2, r2, r0
 85fe02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fe02e:	480d      	ldr	r0, [pc, #52]	; (85fe064 <module_user_pre_init+0x4c>)
 85fe030:	4a0d      	ldr	r2, [pc, #52]	; (85fe068 <module_user_pre_init+0x50>)
 85fe032:	2100      	movs	r1, #0
 85fe034:	4b0d      	ldr	r3, [pc, #52]	; (85fe06c <module_user_pre_init+0x54>)
 85fe036:	1a12      	subs	r2, r2, r0
 85fe038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fe03a:	480d      	ldr	r0, [pc, #52]	; (85fe070 <module_user_pre_init+0x58>)
 85fe03c:	490d      	ldr	r1, [pc, #52]	; (85fe074 <module_user_pre_init+0x5c>)
 85fe03e:	4288      	cmp	r0, r1
 85fe040:	d005      	beq.n	85fe04e <module_user_pre_init+0x36>
 85fe042:	4a0d      	ldr	r2, [pc, #52]	; (85fe078 <module_user_pre_init+0x60>)
 85fe044:	4282      	cmp	r2, r0
 85fe046:	d002      	beq.n	85fe04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fe048:	4b05      	ldr	r3, [pc, #20]	; (85fe060 <module_user_pre_init+0x48>)
 85fe04a:	1a12      	subs	r2, r2, r0
 85fe04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fe04e:	4801      	ldr	r0, [pc, #4]	; (85fe054 <module_user_pre_init+0x3c>)
 85fe050:	bd08      	pop	{r3, pc}
 85fe052:	bf00      	nop
 85fe054:	1007ace0 	.word	0x1007ace0
 85fe058:	085ff890 	.word	0x085ff890
 85fe05c:	1007aea0 	.word	0x1007aea0
 85fe060:	10110d2d 	.word	0x10110d2d
 85fe064:	1007aea0 	.word	0x1007aea0
 85fe068:	1007afe8 	.word	0x1007afe8
 85fe06c:	10110ea1 	.word	0x10110ea1
 85fe070:	023fe7f0 	.word	0x023fe7f0
 85fe074:	085fe088 	.word	0x085fe088
 85fe078:	02400000 	.word	0x02400000

085fe07c <dynalib_preinit>:
 85fe07c:	085fe019 00000000                       .._.....

Disassembly of section .psram_text:

023fe800 <strlen>:
 23fe800:	4603      	mov	r3, r0
 23fe802:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe806:	2a00      	cmp	r2, #0
 23fe808:	d1fb      	bne.n	23fe802 <strlen+0x2>
 23fe80a:	1a18      	subs	r0, r3, r0
 23fe80c:	3801      	subs	r0, #1
 23fe80e:	4770      	bx	lr

023fe810 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fe810:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fe812:	f000 fddd 	bl	23ff3d0 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe816:	2500      	movs	r5, #0
 23fe818:	4e05      	ldr	r6, [pc, #20]	; (23fe830 <module_user_init+0x20>)
 23fe81a:	4c06      	ldr	r4, [pc, #24]	; (23fe834 <module_user_init+0x24>)
 23fe81c:	1ba4      	subs	r4, r4, r6
 23fe81e:	08a4      	lsrs	r4, r4, #2
 23fe820:	42ac      	cmp	r4, r5
 23fe822:	d100      	bne.n	23fe826 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fe824:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fe826:	f856 3b04 	ldr.w	r3, [r6], #4
 23fe82a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe82c:	3501      	adds	r5, #1
 23fe82e:	e7f7      	b.n	23fe820 <module_user_init+0x10>
 23fe830:	023fffdc 	.word	0x023fffdc
 23fe834:	02400000 	.word	0x02400000

023fe838 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fe838:	f000 b813 	b.w	23fe862 <setup>

023fe83c <module_user_loop>:
}

void module_user_loop() {
 23fe83c:	b508      	push	{r3, lr}
    loop();
 23fe83e:	f000 f811 	bl	23fe864 <loop>
    _post_loop();
}
 23fe842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fe846:	f000 bd7b 	b.w	23ff340 <_post_loop>

023fe84a <_Znaj>:
 23fe84a:	f000 ba1d 	b.w	23fec88 <malloc>

023fe84e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fe84e:	f000 ba29 	b.w	23feca4 <free>

023fe852 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fe852:	7800      	ldrb	r0, [r0, #0]
 23fe854:	fab0 f080 	clz	r0, r0
 23fe858:	0940      	lsrs	r0, r0, #5
 23fe85a:	4770      	bx	lr

023fe85c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fe85c:	2301      	movs	r3, #1
 23fe85e:	7003      	strb	r3, [r0, #0]
 23fe860:	4770      	bx	lr

023fe862 <setup>:

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.

}
 23fe862:	4770      	bx	lr

023fe864 <loop>:
 23fe864:	4770      	bx	lr
	...

023fe868 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension10, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension12, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
};const NodeInfo_t nodeData[] = {
 23fe868:	4b09      	ldr	r3, [pc, #36]	; (23fe890 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x28>)
 23fe86a:	681a      	ldr	r2, [r3, #0]
 23fe86c:	4b09      	ldr	r3, [pc, #36]	; (23fe894 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x2c>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 23fe86e:	f102 0130 	add.w	r1, r2, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 23fe872:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension10, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
 23fe876:	f102 0110 	add.w	r1, r2, #16
};const NodeInfo_t nodeData[] = {
 23fe87a:	605a      	str	r2, [r3, #4]
 23fe87c:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
 23fe880:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 23fe884:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
 23fe888:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
 23fe88c:	4770      	bx	lr
 23fe88e:	bf00      	nop
 23fe890:	1007aea0 	.word	0x1007aea0
 23fe894:	1007ace4 	.word	0x1007ace4

023fe898 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fe898:	b509      	push	{r0, r3, lr}
 23fe89a:	4804      	ldr	r0, [pc, #16]	; (23fe8ac <os_mutex_recursive_create+0x14>)
 23fe89c:	6800      	ldr	r0, [r0, #0]
 23fe89e:	4b04      	ldr	r3, [pc, #16]	; (23fe8b0 <os_mutex_recursive_create+0x18>)
 23fe8a0:	4403      	add	r3, r0
 23fe8a2:	681b      	ldr	r3, [r3, #0]
 23fe8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe8a6:	9302      	str	r3, [sp, #8]
 23fe8a8:	bd09      	pop	{r0, r3, pc}
 23fe8aa:	0000      	.short	0x0000
 23fe8ac:	1007ace0 	.word	0x1007ace0
 23fe8b0:	00000030 	.word	0x00000030

023fe8b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fe8b4:	b509      	push	{r0, r3, lr}
 23fe8b6:	4804      	ldr	r0, [pc, #16]	; (23fe8c8 <HAL_RNG_GetRandomNumber+0x14>)
 23fe8b8:	6800      	ldr	r0, [r0, #0]
 23fe8ba:	4b04      	ldr	r3, [pc, #16]	; (23fe8cc <HAL_RNG_GetRandomNumber+0x18>)
 23fe8bc:	4403      	add	r3, r0
 23fe8be:	681b      	ldr	r3, [r3, #0]
 23fe8c0:	685b      	ldr	r3, [r3, #4]
 23fe8c2:	9302      	str	r3, [sp, #8]
 23fe8c4:	bd09      	pop	{r0, r3, pc}
 23fe8c6:	0000      	.short	0x0000
 23fe8c8:	1007ace0 	.word	0x1007ace0
 23fe8cc:	00000000 	.word	0x00000000

023fe8d0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe8d0:	b509      	push	{r0, r3, lr}
 23fe8d2:	4804      	ldr	r0, [pc, #16]	; (23fe8e4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe8d4:	6800      	ldr	r0, [r0, #0]
 23fe8d6:	4b04      	ldr	r3, [pc, #16]	; (23fe8e8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe8d8:	4403      	add	r3, r0
 23fe8da:	681b      	ldr	r3, [r3, #0]
 23fe8dc:	695b      	ldr	r3, [r3, #20]
 23fe8de:	9302      	str	r3, [sp, #8]
 23fe8e0:	bd09      	pop	{r0, r3, pc}
 23fe8e2:	0000      	.short	0x0000
 23fe8e4:	1007ace0 	.word	0x1007ace0
 23fe8e8:	00000000 	.word	0x00000000

023fe8ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fe8ec:	b509      	push	{r0, r3, lr}
 23fe8ee:	4804      	ldr	r0, [pc, #16]	; (23fe900 <inet_inet_ntop+0x14>)
 23fe8f0:	6800      	ldr	r0, [r0, #0]
 23fe8f2:	4b04      	ldr	r3, [pc, #16]	; (23fe904 <inet_inet_ntop+0x18>)
 23fe8f4:	4403      	add	r3, r0
 23fe8f6:	681b      	ldr	r3, [r3, #0]
 23fe8f8:	695b      	ldr	r3, [r3, #20]
 23fe8fa:	9302      	str	r3, [sp, #8]
 23fe8fc:	bd09      	pop	{r0, r3, pc}
 23fe8fe:	0000      	.short	0x0000
 23fe900:	1007ace0 	.word	0x1007ace0
 23fe904:	0000004c 	.word	0x0000004c

023fe908 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fe908:	b509      	push	{r0, r3, lr}
 23fe90a:	4804      	ldr	r0, [pc, #16]	; (23fe91c <netdb_freeaddrinfo+0x14>)
 23fe90c:	6800      	ldr	r0, [r0, #0]
 23fe90e:	4b04      	ldr	r3, [pc, #16]	; (23fe920 <netdb_freeaddrinfo+0x18>)
 23fe910:	4403      	add	r3, r0
 23fe912:	681b      	ldr	r3, [r3, #0]
 23fe914:	689b      	ldr	r3, [r3, #8]
 23fe916:	9302      	str	r3, [sp, #8]
 23fe918:	bd09      	pop	{r0, r3, pc}
 23fe91a:	0000      	.short	0x0000
 23fe91c:	1007ace0 	.word	0x1007ace0
 23fe920:	00000050 	.word	0x00000050

023fe924 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fe924:	b509      	push	{r0, r3, lr}
 23fe926:	4804      	ldr	r0, [pc, #16]	; (23fe938 <netdb_getaddrinfo+0x14>)
 23fe928:	6800      	ldr	r0, [r0, #0]
 23fe92a:	4b04      	ldr	r3, [pc, #16]	; (23fe93c <netdb_getaddrinfo+0x18>)
 23fe92c:	4403      	add	r3, r0
 23fe92e:	681b      	ldr	r3, [r3, #0]
 23fe930:	68db      	ldr	r3, [r3, #12]
 23fe932:	9302      	str	r3, [sp, #8]
 23fe934:	bd09      	pop	{r0, r3, pc}
 23fe936:	0000      	.short	0x0000
 23fe938:	1007ace0 	.word	0x1007ace0
 23fe93c:	00000050 	.word	0x00000050

023fe940 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fe940:	b509      	push	{r0, r3, lr}
 23fe942:	4804      	ldr	r0, [pc, #16]	; (23fe954 <hal_usart_write+0x14>)
 23fe944:	6800      	ldr	r0, [r0, #0]
 23fe946:	4b04      	ldr	r3, [pc, #16]	; (23fe958 <hal_usart_write+0x18>)
 23fe948:	4403      	add	r3, r0
 23fe94a:	681b      	ldr	r3, [r3, #0]
 23fe94c:	68db      	ldr	r3, [r3, #12]
 23fe94e:	9302      	str	r3, [sp, #8]
 23fe950:	bd09      	pop	{r0, r3, pc}
 23fe952:	0000      	.short	0x0000
 23fe954:	1007ace0 	.word	0x1007ace0
 23fe958:	00000024 	.word	0x00000024

023fe95c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fe95c:	b509      	push	{r0, r3, lr}
 23fe95e:	4804      	ldr	r0, [pc, #16]	; (23fe970 <hal_usart_available+0x14>)
 23fe960:	6800      	ldr	r0, [r0, #0]
 23fe962:	4b04      	ldr	r3, [pc, #16]	; (23fe974 <hal_usart_available+0x18>)
 23fe964:	4403      	add	r3, r0
 23fe966:	681b      	ldr	r3, [r3, #0]
 23fe968:	691b      	ldr	r3, [r3, #16]
 23fe96a:	9302      	str	r3, [sp, #8]
 23fe96c:	bd09      	pop	{r0, r3, pc}
 23fe96e:	0000      	.short	0x0000
 23fe970:	1007ace0 	.word	0x1007ace0
 23fe974:	00000024 	.word	0x00000024

023fe978 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fe978:	b509      	push	{r0, r3, lr}
 23fe97a:	4804      	ldr	r0, [pc, #16]	; (23fe98c <hal_usart_read+0x14>)
 23fe97c:	6800      	ldr	r0, [r0, #0]
 23fe97e:	4b04      	ldr	r3, [pc, #16]	; (23fe990 <hal_usart_read+0x18>)
 23fe980:	4403      	add	r3, r0
 23fe982:	681b      	ldr	r3, [r3, #0]
 23fe984:	695b      	ldr	r3, [r3, #20]
 23fe986:	9302      	str	r3, [sp, #8]
 23fe988:	bd09      	pop	{r0, r3, pc}
 23fe98a:	0000      	.short	0x0000
 23fe98c:	1007ace0 	.word	0x1007ace0
 23fe990:	00000024 	.word	0x00000024

023fe994 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fe994:	b509      	push	{r0, r3, lr}
 23fe996:	4804      	ldr	r0, [pc, #16]	; (23fe9a8 <hal_usart_peek+0x14>)
 23fe998:	6800      	ldr	r0, [r0, #0]
 23fe99a:	4b04      	ldr	r3, [pc, #16]	; (23fe9ac <hal_usart_peek+0x18>)
 23fe99c:	4403      	add	r3, r0
 23fe99e:	681b      	ldr	r3, [r3, #0]
 23fe9a0:	699b      	ldr	r3, [r3, #24]
 23fe9a2:	9302      	str	r3, [sp, #8]
 23fe9a4:	bd09      	pop	{r0, r3, pc}
 23fe9a6:	0000      	.short	0x0000
 23fe9a8:	1007ace0 	.word	0x1007ace0
 23fe9ac:	00000024 	.word	0x00000024

023fe9b0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fe9b0:	b509      	push	{r0, r3, lr}
 23fe9b2:	4804      	ldr	r0, [pc, #16]	; (23fe9c4 <hal_usart_flush+0x14>)
 23fe9b4:	6800      	ldr	r0, [r0, #0]
 23fe9b6:	4b04      	ldr	r3, [pc, #16]	; (23fe9c8 <hal_usart_flush+0x18>)
 23fe9b8:	4403      	add	r3, r0
 23fe9ba:	681b      	ldr	r3, [r3, #0]
 23fe9bc:	69db      	ldr	r3, [r3, #28]
 23fe9be:	9302      	str	r3, [sp, #8]
 23fe9c0:	bd09      	pop	{r0, r3, pc}
 23fe9c2:	0000      	.short	0x0000
 23fe9c4:	1007ace0 	.word	0x1007ace0
 23fe9c8:	00000024 	.word	0x00000024

023fe9cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fe9cc:	b509      	push	{r0, r3, lr}
 23fe9ce:	4804      	ldr	r0, [pc, #16]	; (23fe9e0 <hal_usart_is_enabled+0x14>)
 23fe9d0:	6800      	ldr	r0, [r0, #0]
 23fe9d2:	4b04      	ldr	r3, [pc, #16]	; (23fe9e4 <hal_usart_is_enabled+0x18>)
 23fe9d4:	4403      	add	r3, r0
 23fe9d6:	681b      	ldr	r3, [r3, #0]
 23fe9d8:	6a1b      	ldr	r3, [r3, #32]
 23fe9da:	9302      	str	r3, [sp, #8]
 23fe9dc:	bd09      	pop	{r0, r3, pc}
 23fe9de:	0000      	.short	0x0000
 23fe9e0:	1007ace0 	.word	0x1007ace0
 23fe9e4:	00000024 	.word	0x00000024

023fe9e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fe9e8:	b509      	push	{r0, r3, lr}
 23fe9ea:	4804      	ldr	r0, [pc, #16]	; (23fe9fc <hal_usart_available_data_for_write+0x14>)
 23fe9ec:	6800      	ldr	r0, [r0, #0]
 23fe9ee:	4b04      	ldr	r3, [pc, #16]	; (23fea00 <hal_usart_available_data_for_write+0x18>)
 23fe9f0:	4403      	add	r3, r0
 23fe9f2:	681b      	ldr	r3, [r3, #0]
 23fe9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe9f6:	9302      	str	r3, [sp, #8]
 23fe9f8:	bd09      	pop	{r0, r3, pc}
 23fe9fa:	0000      	.short	0x0000
 23fe9fc:	1007ace0 	.word	0x1007ace0
 23fea00:	00000024 	.word	0x00000024

023fea04 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fea04:	b509      	push	{r0, r3, lr}
 23fea06:	4804      	ldr	r0, [pc, #16]	; (23fea18 <hal_usart_init_ex+0x14>)
 23fea08:	6800      	ldr	r0, [r0, #0]
 23fea0a:	4b04      	ldr	r3, [pc, #16]	; (23fea1c <hal_usart_init_ex+0x18>)
 23fea0c:	4403      	add	r3, r0
 23fea0e:	681b      	ldr	r3, [r3, #0]
 23fea10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fea12:	9302      	str	r3, [sp, #8]
 23fea14:	bd09      	pop	{r0, r3, pc}
 23fea16:	0000      	.short	0x0000
 23fea18:	1007ace0 	.word	0x1007ace0
 23fea1c:	00000024 	.word	0x00000024

023fea20 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fea20:	b509      	push	{r0, r3, lr}
 23fea22:	4804      	ldr	r0, [pc, #16]	; (23fea34 <HAL_USB_USART_Init+0x14>)
 23fea24:	6800      	ldr	r0, [r0, #0]
 23fea26:	4b04      	ldr	r3, [pc, #16]	; (23fea38 <HAL_USB_USART_Init+0x18>)
 23fea28:	4403      	add	r3, r0
 23fea2a:	681b      	ldr	r3, [r3, #0]
 23fea2c:	681b      	ldr	r3, [r3, #0]
 23fea2e:	9302      	str	r3, [sp, #8]
 23fea30:	bd09      	pop	{r0, r3, pc}
 23fea32:	0000      	.short	0x0000
 23fea34:	1007ace0 	.word	0x1007ace0
 23fea38:	00000034 	.word	0x00000034

023fea3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fea3c:	b509      	push	{r0, r3, lr}
 23fea3e:	4804      	ldr	r0, [pc, #16]	; (23fea50 <HAL_USB_USART_Available_Data+0x14>)
 23fea40:	6800      	ldr	r0, [r0, #0]
 23fea42:	4b04      	ldr	r3, [pc, #16]	; (23fea54 <HAL_USB_USART_Available_Data+0x18>)
 23fea44:	4403      	add	r3, r0
 23fea46:	681b      	ldr	r3, [r3, #0]
 23fea48:	691b      	ldr	r3, [r3, #16]
 23fea4a:	9302      	str	r3, [sp, #8]
 23fea4c:	bd09      	pop	{r0, r3, pc}
 23fea4e:	0000      	.short	0x0000
 23fea50:	1007ace0 	.word	0x1007ace0
 23fea54:	00000034 	.word	0x00000034

023fea58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fea58:	b509      	push	{r0, r3, lr}
 23fea5a:	4804      	ldr	r0, [pc, #16]	; (23fea6c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fea5c:	6800      	ldr	r0, [r0, #0]
 23fea5e:	4b04      	ldr	r3, [pc, #16]	; (23fea70 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fea60:	4403      	add	r3, r0
 23fea62:	681b      	ldr	r3, [r3, #0]
 23fea64:	695b      	ldr	r3, [r3, #20]
 23fea66:	9302      	str	r3, [sp, #8]
 23fea68:	bd09      	pop	{r0, r3, pc}
 23fea6a:	0000      	.short	0x0000
 23fea6c:	1007ace0 	.word	0x1007ace0
 23fea70:	00000034 	.word	0x00000034

023fea74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fea74:	b509      	push	{r0, r3, lr}
 23fea76:	4804      	ldr	r0, [pc, #16]	; (23fea88 <HAL_USB_USART_Receive_Data+0x14>)
 23fea78:	6800      	ldr	r0, [r0, #0]
 23fea7a:	4b04      	ldr	r3, [pc, #16]	; (23fea8c <HAL_USB_USART_Receive_Data+0x18>)
 23fea7c:	4403      	add	r3, r0
 23fea7e:	681b      	ldr	r3, [r3, #0]
 23fea80:	699b      	ldr	r3, [r3, #24]
 23fea82:	9302      	str	r3, [sp, #8]
 23fea84:	bd09      	pop	{r0, r3, pc}
 23fea86:	0000      	.short	0x0000
 23fea88:	1007ace0 	.word	0x1007ace0
 23fea8c:	00000034 	.word	0x00000034

023fea90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fea90:	b509      	push	{r0, r3, lr}
 23fea92:	4804      	ldr	r0, [pc, #16]	; (23feaa4 <HAL_USB_USART_Send_Data+0x14>)
 23fea94:	6800      	ldr	r0, [r0, #0]
 23fea96:	4b04      	ldr	r3, [pc, #16]	; (23feaa8 <HAL_USB_USART_Send_Data+0x18>)
 23fea98:	4403      	add	r3, r0
 23fea9a:	681b      	ldr	r3, [r3, #0]
 23fea9c:	69db      	ldr	r3, [r3, #28]
 23fea9e:	9302      	str	r3, [sp, #8]
 23feaa0:	bd09      	pop	{r0, r3, pc}
 23feaa2:	0000      	.short	0x0000
 23feaa4:	1007ace0 	.word	0x1007ace0
 23feaa8:	00000034 	.word	0x00000034

023feaac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23feaac:	b509      	push	{r0, r3, lr}
 23feaae:	4804      	ldr	r0, [pc, #16]	; (23feac0 <HAL_USB_USART_Flush_Data+0x14>)
 23feab0:	6800      	ldr	r0, [r0, #0]
 23feab2:	4b04      	ldr	r3, [pc, #16]	; (23feac4 <HAL_USB_USART_Flush_Data+0x18>)
 23feab4:	4403      	add	r3, r0
 23feab6:	681b      	ldr	r3, [r3, #0]
 23feab8:	6a1b      	ldr	r3, [r3, #32]
 23feaba:	9302      	str	r3, [sp, #8]
 23feabc:	bd09      	pop	{r0, r3, pc}
 23feabe:	0000      	.short	0x0000
 23feac0:	1007ace0 	.word	0x1007ace0
 23feac4:	00000034 	.word	0x00000034

023feac8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23feac8:	b509      	push	{r0, r3, lr}
 23feaca:	4804      	ldr	r0, [pc, #16]	; (23feadc <set_system_mode+0x14>)
 23feacc:	6800      	ldr	r0, [r0, #0]
 23feace:	4b04      	ldr	r3, [pc, #16]	; (23feae0 <set_system_mode+0x18>)
 23fead0:	4403      	add	r3, r0
 23fead2:	681b      	ldr	r3, [r3, #0]
 23fead4:	685b      	ldr	r3, [r3, #4]
 23fead6:	9302      	str	r3, [sp, #8]
 23fead8:	bd09      	pop	{r0, r3, pc}
 23feada:	0000      	.short	0x0000
 23feadc:	1007ace0 	.word	0x1007ace0
 23feae0:	00000008 	.word	0x00000008

023feae4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23feae4:	b509      	push	{r0, r3, lr}
 23feae6:	4804      	ldr	r0, [pc, #16]	; (23feaf8 <system_ctrl_set_app_request_handler+0x14>)
 23feae8:	6800      	ldr	r0, [r0, #0]
 23feaea:	4b04      	ldr	r3, [pc, #16]	; (23feafc <system_ctrl_set_app_request_handler+0x18>)
 23feaec:	4403      	add	r3, r0
 23feaee:	681b      	ldr	r3, [r3, #0]
 23feaf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23feaf4:	9302      	str	r3, [sp, #8]
 23feaf6:	bd09      	pop	{r0, r3, pc}
 23feaf8:	1007ace0 	.word	0x1007ace0
 23feafc:	00000008 	.word	0x00000008

023feb00 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23feb00:	b509      	push	{r0, r3, lr}
 23feb02:	4804      	ldr	r0, [pc, #16]	; (23feb14 <system_ctrl_set_result+0x14>)
 23feb04:	6800      	ldr	r0, [r0, #0]
 23feb06:	4b04      	ldr	r3, [pc, #16]	; (23feb18 <system_ctrl_set_result+0x18>)
 23feb08:	4403      	add	r3, r0
 23feb0a:	681b      	ldr	r3, [r3, #0]
 23feb0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23feb10:	9302      	str	r3, [sp, #8]
 23feb12:	bd09      	pop	{r0, r3, pc}
 23feb14:	1007ace0 	.word	0x1007ace0
 23feb18:	00000008 	.word	0x00000008

023feb1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23feb1c:	b509      	push	{r0, r3, lr}
 23feb1e:	4804      	ldr	r0, [pc, #16]	; (23feb30 <spark_set_random_seed_from_cloud_handler+0x14>)
 23feb20:	6800      	ldr	r0, [r0, #0]
 23feb22:	4b04      	ldr	r3, [pc, #16]	; (23feb34 <spark_set_random_seed_from_cloud_handler+0x18>)
 23feb24:	4403      	add	r3, r0
 23feb26:	681b      	ldr	r3, [r3, #0]
 23feb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23feb2a:	9302      	str	r3, [sp, #8]
 23feb2c:	bd09      	pop	{r0, r3, pc}
 23feb2e:	0000      	.short	0x0000
 23feb30:	1007ace0 	.word	0x1007ace0
 23feb34:	0000002c 	.word	0x0000002c

023feb38 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23feb38:	b509      	push	{r0, r3, lr}
 23feb3a:	4804      	ldr	r0, [pc, #16]	; (23feb4c <network_connect+0x14>)
 23feb3c:	6800      	ldr	r0, [r0, #0]
 23feb3e:	4b04      	ldr	r3, [pc, #16]	; (23feb50 <network_connect+0x18>)
 23feb40:	4403      	add	r3, r0
 23feb42:	681b      	ldr	r3, [r3, #0]
 23feb44:	685b      	ldr	r3, [r3, #4]
 23feb46:	9302      	str	r3, [sp, #8]
 23feb48:	bd09      	pop	{r0, r3, pc}
 23feb4a:	0000      	.short	0x0000
 23feb4c:	1007ace0 	.word	0x1007ace0
 23feb50:	00000028 	.word	0x00000028

023feb54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23feb54:	b509      	push	{r0, r3, lr}
 23feb56:	4804      	ldr	r0, [pc, #16]	; (23feb68 <network_connecting+0x14>)
 23feb58:	6800      	ldr	r0, [r0, #0]
 23feb5a:	4b04      	ldr	r3, [pc, #16]	; (23feb6c <network_connecting+0x18>)
 23feb5c:	4403      	add	r3, r0
 23feb5e:	681b      	ldr	r3, [r3, #0]
 23feb60:	689b      	ldr	r3, [r3, #8]
 23feb62:	9302      	str	r3, [sp, #8]
 23feb64:	bd09      	pop	{r0, r3, pc}
 23feb66:	0000      	.short	0x0000
 23feb68:	1007ace0 	.word	0x1007ace0
 23feb6c:	00000028 	.word	0x00000028

023feb70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23feb70:	b509      	push	{r0, r3, lr}
 23feb72:	4804      	ldr	r0, [pc, #16]	; (23feb84 <network_disconnect+0x14>)
 23feb74:	6800      	ldr	r0, [r0, #0]
 23feb76:	4b04      	ldr	r3, [pc, #16]	; (23feb88 <network_disconnect+0x18>)
 23feb78:	4403      	add	r3, r0
 23feb7a:	681b      	ldr	r3, [r3, #0]
 23feb7c:	68db      	ldr	r3, [r3, #12]
 23feb7e:	9302      	str	r3, [sp, #8]
 23feb80:	bd09      	pop	{r0, r3, pc}
 23feb82:	0000      	.short	0x0000
 23feb84:	1007ace0 	.word	0x1007ace0
 23feb88:	00000028 	.word	0x00000028

023feb8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23feb8c:	b509      	push	{r0, r3, lr}
 23feb8e:	4804      	ldr	r0, [pc, #16]	; (23feba0 <network_ready+0x14>)
 23feb90:	6800      	ldr	r0, [r0, #0]
 23feb92:	4b04      	ldr	r3, [pc, #16]	; (23feba4 <network_ready+0x18>)
 23feb94:	4403      	add	r3, r0
 23feb96:	681b      	ldr	r3, [r3, #0]
 23feb98:	691b      	ldr	r3, [r3, #16]
 23feb9a:	9302      	str	r3, [sp, #8]
 23feb9c:	bd09      	pop	{r0, r3, pc}
 23feb9e:	0000      	.short	0x0000
 23feba0:	1007ace0 	.word	0x1007ace0
 23feba4:	00000028 	.word	0x00000028

023feba8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23feba8:	b509      	push	{r0, r3, lr}
 23febaa:	4804      	ldr	r0, [pc, #16]	; (23febbc <network_on+0x14>)
 23febac:	6800      	ldr	r0, [r0, #0]
 23febae:	4b04      	ldr	r3, [pc, #16]	; (23febc0 <network_on+0x18>)
 23febb0:	4403      	add	r3, r0
 23febb2:	681b      	ldr	r3, [r3, #0]
 23febb4:	695b      	ldr	r3, [r3, #20]
 23febb6:	9302      	str	r3, [sp, #8]
 23febb8:	bd09      	pop	{r0, r3, pc}
 23febba:	0000      	.short	0x0000
 23febbc:	1007ace0 	.word	0x1007ace0
 23febc0:	00000028 	.word	0x00000028

023febc4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23febc4:	b509      	push	{r0, r3, lr}
 23febc6:	4804      	ldr	r0, [pc, #16]	; (23febd8 <network_off+0x14>)
 23febc8:	6800      	ldr	r0, [r0, #0]
 23febca:	4b04      	ldr	r3, [pc, #16]	; (23febdc <network_off+0x18>)
 23febcc:	4403      	add	r3, r0
 23febce:	681b      	ldr	r3, [r3, #0]
 23febd0:	699b      	ldr	r3, [r3, #24]
 23febd2:	9302      	str	r3, [sp, #8]
 23febd4:	bd09      	pop	{r0, r3, pc}
 23febd6:	0000      	.short	0x0000
 23febd8:	1007ace0 	.word	0x1007ace0
 23febdc:	00000028 	.word	0x00000028

023febe0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23febe0:	b509      	push	{r0, r3, lr}
 23febe2:	4804      	ldr	r0, [pc, #16]	; (23febf4 <network_listen+0x14>)
 23febe4:	6800      	ldr	r0, [r0, #0]
 23febe6:	4b04      	ldr	r3, [pc, #16]	; (23febf8 <network_listen+0x18>)
 23febe8:	4403      	add	r3, r0
 23febea:	681b      	ldr	r3, [r3, #0]
 23febec:	69db      	ldr	r3, [r3, #28]
 23febee:	9302      	str	r3, [sp, #8]
 23febf0:	bd09      	pop	{r0, r3, pc}
 23febf2:	0000      	.short	0x0000
 23febf4:	1007ace0 	.word	0x1007ace0
 23febf8:	00000028 	.word	0x00000028

023febfc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23febfc:	b509      	push	{r0, r3, lr}
 23febfe:	4804      	ldr	r0, [pc, #16]	; (23fec10 <network_listening+0x14>)
 23fec00:	6800      	ldr	r0, [r0, #0]
 23fec02:	4b04      	ldr	r3, [pc, #16]	; (23fec14 <network_listening+0x18>)
 23fec04:	4403      	add	r3, r0
 23fec06:	681b      	ldr	r3, [r3, #0]
 23fec08:	6a1b      	ldr	r3, [r3, #32]
 23fec0a:	9302      	str	r3, [sp, #8]
 23fec0c:	bd09      	pop	{r0, r3, pc}
 23fec0e:	0000      	.short	0x0000
 23fec10:	1007ace0 	.word	0x1007ace0
 23fec14:	00000028 	.word	0x00000028

023fec18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fec18:	b509      	push	{r0, r3, lr}
 23fec1a:	4804      	ldr	r0, [pc, #16]	; (23fec2c <network_set_listen_timeout+0x14>)
 23fec1c:	6800      	ldr	r0, [r0, #0]
 23fec1e:	4b04      	ldr	r3, [pc, #16]	; (23fec30 <network_set_listen_timeout+0x18>)
 23fec20:	4403      	add	r3, r0
 23fec22:	681b      	ldr	r3, [r3, #0]
 23fec24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fec26:	9302      	str	r3, [sp, #8]
 23fec28:	bd09      	pop	{r0, r3, pc}
 23fec2a:	0000      	.short	0x0000
 23fec2c:	1007ace0 	.word	0x1007ace0
 23fec30:	00000028 	.word	0x00000028

023fec34 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fec34:	b509      	push	{r0, r3, lr}
 23fec36:	4804      	ldr	r0, [pc, #16]	; (23fec48 <network_get_listen_timeout+0x14>)
 23fec38:	6800      	ldr	r0, [r0, #0]
 23fec3a:	4b04      	ldr	r3, [pc, #16]	; (23fec4c <network_get_listen_timeout+0x18>)
 23fec3c:	4403      	add	r3, r0
 23fec3e:	681b      	ldr	r3, [r3, #0]
 23fec40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fec42:	9302      	str	r3, [sp, #8]
 23fec44:	bd09      	pop	{r0, r3, pc}
 23fec46:	0000      	.short	0x0000
 23fec48:	1007ace0 	.word	0x1007ace0
 23fec4c:	00000028 	.word	0x00000028

023fec50 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fec50:	b509      	push	{r0, r3, lr}
 23fec52:	4804      	ldr	r0, [pc, #16]	; (23fec64 <network_is_on+0x14>)
 23fec54:	6800      	ldr	r0, [r0, #0]
 23fec56:	4b04      	ldr	r3, [pc, #16]	; (23fec68 <network_is_on+0x18>)
 23fec58:	4403      	add	r3, r0
 23fec5a:	681b      	ldr	r3, [r3, #0]
 23fec5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fec5e:	9302      	str	r3, [sp, #8]
 23fec60:	bd09      	pop	{r0, r3, pc}
 23fec62:	0000      	.short	0x0000
 23fec64:	1007ace0 	.word	0x1007ace0
 23fec68:	00000028 	.word	0x00000028

023fec6c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fec6c:	b509      	push	{r0, r3, lr}
 23fec6e:	4804      	ldr	r0, [pc, #16]	; (23fec80 <network_is_off+0x14>)
 23fec70:	6800      	ldr	r0, [r0, #0]
 23fec72:	4b04      	ldr	r3, [pc, #16]	; (23fec84 <network_is_off+0x18>)
 23fec74:	4403      	add	r3, r0
 23fec76:	681b      	ldr	r3, [r3, #0]
 23fec78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fec7a:	9302      	str	r3, [sp, #8]
 23fec7c:	bd09      	pop	{r0, r3, pc}
 23fec7e:	0000      	.short	0x0000
 23fec80:	1007ace0 	.word	0x1007ace0
 23fec84:	00000028 	.word	0x00000028

023fec88 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fec88:	b509      	push	{r0, r3, lr}
 23fec8a:	4804      	ldr	r0, [pc, #16]	; (23fec9c <malloc+0x14>)
 23fec8c:	6800      	ldr	r0, [r0, #0]
 23fec8e:	4b04      	ldr	r3, [pc, #16]	; (23feca0 <malloc+0x18>)
 23fec90:	4403      	add	r3, r0
 23fec92:	681b      	ldr	r3, [r3, #0]
 23fec94:	681b      	ldr	r3, [r3, #0]
 23fec96:	9302      	str	r3, [sp, #8]
 23fec98:	bd09      	pop	{r0, r3, pc}
 23fec9a:	0000      	.short	0x0000
 23fec9c:	1007ace0 	.word	0x1007ace0
 23feca0:	00000004 	.word	0x00000004

023feca4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23feca4:	b509      	push	{r0, r3, lr}
 23feca6:	4804      	ldr	r0, [pc, #16]	; (23fecb8 <free+0x14>)
 23feca8:	6800      	ldr	r0, [r0, #0]
 23fecaa:	4b04      	ldr	r3, [pc, #16]	; (23fecbc <free+0x18>)
 23fecac:	4403      	add	r3, r0
 23fecae:	681b      	ldr	r3, [r3, #0]
 23fecb0:	685b      	ldr	r3, [r3, #4]
 23fecb2:	9302      	str	r3, [sp, #8]
 23fecb4:	bd09      	pop	{r0, r3, pc}
 23fecb6:	0000      	.short	0x0000
 23fecb8:	1007ace0 	.word	0x1007ace0
 23fecbc:	00000004 	.word	0x00000004

023fecc0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fecc0:	b509      	push	{r0, r3, lr}
 23fecc2:	4804      	ldr	r0, [pc, #16]	; (23fecd4 <__assert_func+0x14>)
 23fecc4:	6800      	ldr	r0, [r0, #0]
 23fecc6:	4b04      	ldr	r3, [pc, #16]	; (23fecd8 <__assert_func+0x18>)
 23fecc8:	4403      	add	r3, r0
 23fecca:	681b      	ldr	r3, [r3, #0]
 23feccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fecce:	9302      	str	r3, [sp, #8]
 23fecd0:	bd09      	pop	{r0, r3, pc}
 23fecd2:	0000      	.short	0x0000
 23fecd4:	1007ace0 	.word	0x1007ace0
 23fecd8:	00000004 	.word	0x00000004

023fecdc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fecdc:	b509      	push	{r0, r3, lr}
 23fecde:	4804      	ldr	r0, [pc, #16]	; (23fecf0 <newlib_impure_ptr_callback+0x14>)
 23fece0:	6800      	ldr	r0, [r0, #0]
 23fece2:	4b04      	ldr	r3, [pc, #16]	; (23fecf4 <newlib_impure_ptr_callback+0x18>)
 23fece4:	4403      	add	r3, r0
 23fece6:	681b      	ldr	r3, [r3, #0]
 23fece8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fecea:	9302      	str	r3, [sp, #8]
 23fecec:	bd09      	pop	{r0, r3, pc}
 23fecee:	0000      	.short	0x0000
 23fecf0:	1007ace0 	.word	0x1007ace0
 23fecf4:	00000004 	.word	0x00000004

023fecf8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fecf8:	2300      	movs	r3, #0
 23fecfa:	4802      	ldr	r0, [pc, #8]	; (23fed04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fecfc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fecfe:	f7ff bdcb 	b.w	23fe898 <os_mutex_recursive_create>
 23fed02:	bf00      	nop
 23fed04:	1007aea4 	.word	0x1007aea4

023fed08 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fed08:	2200      	movs	r2, #0
 23fed0a:	6840      	ldr	r0, [r0, #4]
 23fed0c:	4611      	mov	r1, r2
 23fed0e:	f7ff bf75 	b.w	23febfc <network_listening>

023fed12 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fed12:	2200      	movs	r2, #0
 23fed14:	6840      	ldr	r0, [r0, #4]
 23fed16:	4611      	mov	r1, r2
 23fed18:	f7ff bf8c 	b.w	23fec34 <network_get_listen_timeout>

023fed1c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fed1c:	2200      	movs	r2, #0
 23fed1e:	6840      	ldr	r0, [r0, #4]
 23fed20:	f7ff bf7a 	b.w	23fec18 <network_set_listen_timeout>

023fed24 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fed24:	2200      	movs	r2, #0
 23fed26:	6840      	ldr	r0, [r0, #4]
 23fed28:	f081 0101 	eor.w	r1, r1, #1
 23fed2c:	f7ff bf58 	b.w	23febe0 <network_listen>

023fed30 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fed30:	2300      	movs	r3, #0
 23fed32:	6840      	ldr	r0, [r0, #4]
 23fed34:	461a      	mov	r2, r3
 23fed36:	4619      	mov	r1, r3
 23fed38:	f7ff bf44 	b.w	23febc4 <network_off>

023fed3c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fed3c:	2300      	movs	r3, #0
 23fed3e:	6840      	ldr	r0, [r0, #4]
 23fed40:	461a      	mov	r2, r3
 23fed42:	4619      	mov	r1, r3
 23fed44:	f7ff bf30 	b.w	23feba8 <network_on>

023fed48 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fed48:	2200      	movs	r2, #0
 23fed4a:	6840      	ldr	r0, [r0, #4]
 23fed4c:	4611      	mov	r1, r2
 23fed4e:	f7ff bf1d 	b.w	23feb8c <network_ready>

023fed52 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fed52:	2200      	movs	r2, #0
 23fed54:	6840      	ldr	r0, [r0, #4]
 23fed56:	4611      	mov	r1, r2
 23fed58:	f7ff befc 	b.w	23feb54 <network_connecting>

023fed5c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fed5c:	2200      	movs	r2, #0
 23fed5e:	2102      	movs	r1, #2
 23fed60:	6840      	ldr	r0, [r0, #4]
 23fed62:	f7ff bf05 	b.w	23feb70 <network_disconnect>

023fed66 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fed66:	2300      	movs	r3, #0
 23fed68:	6840      	ldr	r0, [r0, #4]
 23fed6a:	461a      	mov	r2, r3
 23fed6c:	f7ff bee4 	b.w	23feb38 <network_connect>

023fed70 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fed70:	2203      	movs	r2, #3
 23fed72:	4b02      	ldr	r3, [pc, #8]	; (23fed7c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fed74:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fed76:	4a02      	ldr	r2, [pc, #8]	; (23fed80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fed78:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fed7a:	4770      	bx	lr
 23fed7c:	1007aea8 	.word	0x1007aea8
 23fed80:	023ffe28 	.word	0x023ffe28

023fed84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fed84:	4770      	bx	lr

023fed86 <_ZN9IPAddressD0Ev>:
 23fed86:	b510      	push	{r4, lr}
 23fed88:	4604      	mov	r4, r0
 23fed8a:	2118      	movs	r1, #24
 23fed8c:	f7ff fd5f 	bl	23fe84e <_ZdlPvj>
 23fed90:	4620      	mov	r0, r4
 23fed92:	bd10      	pop	{r4, pc}

023fed94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fed94:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fed96:	7d03      	ldrb	r3, [r0, #20]
{
 23fed98:	460e      	mov	r6, r1
	if (address.v==6) {
 23fed9a:	2b06      	cmp	r3, #6
 23fed9c:	f04f 0400 	mov.w	r4, #0
{
 23feda0:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23feda2:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23feda6:	d012      	beq.n	23fedce <_ZNK9IPAddress7printToER5Print+0x3a>
 23feda8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fedac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fedb0:	220a      	movs	r2, #10
 23fedb2:	4630      	mov	r0, r6
 23fedb4:	f000 f943 	bl	23ff03e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fedb8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fedba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fedbc:	d019      	beq.n	23fedf2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fedbe:	2c00      	cmp	r4, #0
 23fedc0:	d0f4      	beq.n	23fedac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fedc2:	212e      	movs	r1, #46	; 0x2e
 23fedc4:	4630      	mov	r0, r6
 23fedc6:	f000 f937 	bl	23ff038 <_ZN5Print5printEc>
 23fedca:	4404      	add	r4, r0
 23fedcc:	e7ee      	b.n	23fedac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fedce:	232f      	movs	r3, #47	; 0x2f
 23fedd0:	466a      	mov	r2, sp
 23fedd2:	4639      	mov	r1, r7
 23fedd4:	200a      	movs	r0, #10
		buf[0] = 0;
 23fedd6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fedda:	f7ff fd87 	bl	23fe8ec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fedde:	4668      	mov	r0, sp
 23fede0:	f7ff fd0e 	bl	23fe800 <strlen>
 23fede4:	6833      	ldr	r3, [r6, #0]
 23fede6:	4602      	mov	r2, r0
 23fede8:	4669      	mov	r1, sp
 23fedea:	4630      	mov	r0, r6
 23fedec:	68db      	ldr	r3, [r3, #12]
 23fedee:	4798      	blx	r3
 23fedf0:	4604      	mov	r4, r0
    }
    return n;
}
 23fedf2:	4620      	mov	r0, r4
 23fedf4:	b00d      	add	sp, #52	; 0x34
 23fedf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fedf8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fedf8:	b510      	push	{r4, lr}
 23fedfa:	4604      	mov	r4, r0
 23fedfc:	4b04      	ldr	r3, [pc, #16]	; (23fee10 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fedfe:	2211      	movs	r2, #17
 23fee00:	2100      	movs	r1, #0
 23fee02:	f840 3b04 	str.w	r3, [r0], #4
 23fee06:	f000 fbea 	bl	23ff5de <memset>
}
 23fee0a:	4620      	mov	r0, r4
 23fee0c:	bd10      	pop	{r4, pc}
 23fee0e:	bf00      	nop
 23fee10:	023ffe64 	.word	0x023ffe64

023fee14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fee14:	4603      	mov	r3, r0
 23fee16:	4a07      	ldr	r2, [pc, #28]	; (23fee34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fee18:	b510      	push	{r4, lr}
 23fee1a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fee1e:	f101 0210 	add.w	r2, r1, #16
 23fee22:	f851 4b04 	ldr.w	r4, [r1], #4
 23fee26:	4291      	cmp	r1, r2
 23fee28:	f843 4b04 	str.w	r4, [r3], #4
 23fee2c:	d1f9      	bne.n	23fee22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fee2e:	780a      	ldrb	r2, [r1, #0]
 23fee30:	701a      	strb	r2, [r3, #0]
}
 23fee32:	bd10      	pop	{r4, pc}
 23fee34:	023ffe64 	.word	0x023ffe64

023fee38 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fee38:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fee3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fee3e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fee42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fee46:	2304      	movs	r3, #4
 23fee48:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fee4c:	6041      	str	r1, [r0, #4]
 23fee4e:	7503      	strb	r3, [r0, #20]
}
 23fee50:	bd10      	pop	{r4, pc}
	...

023fee54 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fee54:	b507      	push	{r0, r1, r2, lr}
 23fee56:	4b06      	ldr	r3, [pc, #24]	; (23fee70 <_ZN9IPAddressC1EPKh+0x1c>)
 23fee58:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fee5a:	78cb      	ldrb	r3, [r1, #3]
 23fee5c:	9300      	str	r3, [sp, #0]
 23fee5e:	788b      	ldrb	r3, [r1, #2]
 23fee60:	784a      	ldrb	r2, [r1, #1]
 23fee62:	7809      	ldrb	r1, [r1, #0]
 23fee64:	f7ff ffe8 	bl	23fee38 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fee68:	b003      	add	sp, #12
 23fee6a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fee6e:	bf00      	nop
 23fee70:	023ffe64 	.word	0x023ffe64

023fee74 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fee74:	4b01      	ldr	r3, [pc, #4]	; (23fee7c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fee76:	4a02      	ldr	r2, [pc, #8]	; (23fee80 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fee78:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fee7a:	4770      	bx	lr
 23fee7c:	1007aeb0 	.word	0x1007aeb0
 23fee80:	023ffe70 	.word	0x023ffe70

023fee84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fee84:	2300      	movs	r3, #0
 23fee86:	6840      	ldr	r0, [r0, #4]
 23fee88:	461a      	mov	r2, r3
 23fee8a:	f7ff be55 	b.w	23feb38 <network_connect>

023fee8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fee8e:	2200      	movs	r2, #0
 23fee90:	2102      	movs	r1, #2
 23fee92:	6840      	ldr	r0, [r0, #4]
 23fee94:	f7ff be6c 	b.w	23feb70 <network_disconnect>

023fee98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fee98:	2200      	movs	r2, #0
 23fee9a:	6840      	ldr	r0, [r0, #4]
 23fee9c:	4611      	mov	r1, r2
 23fee9e:	f7ff be59 	b.w	23feb54 <network_connecting>

023feea2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23feea2:	2200      	movs	r2, #0
 23feea4:	6840      	ldr	r0, [r0, #4]
 23feea6:	4611      	mov	r1, r2
 23feea8:	f7ff be70 	b.w	23feb8c <network_ready>

023feeac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23feeac:	2300      	movs	r3, #0
 23feeae:	6840      	ldr	r0, [r0, #4]
 23feeb0:	461a      	mov	r2, r3
 23feeb2:	4619      	mov	r1, r3
 23feeb4:	f7ff be78 	b.w	23feba8 <network_on>

023feeb8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23feeb8:	2300      	movs	r3, #0
 23feeba:	6840      	ldr	r0, [r0, #4]
 23feebc:	461a      	mov	r2, r3
 23feebe:	4619      	mov	r1, r3
 23feec0:	f7ff be80 	b.w	23febc4 <network_off>

023feec4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23feec4:	2100      	movs	r1, #0
 23feec6:	6840      	ldr	r0, [r0, #4]
 23feec8:	f7ff bec2 	b.w	23fec50 <network_is_on>

023feecc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23feecc:	2100      	movs	r1, #0
 23feece:	6840      	ldr	r0, [r0, #4]
 23feed0:	f7ff becc 	b.w	23fec6c <network_is_off>

023feed4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23feed4:	2200      	movs	r2, #0
 23feed6:	6840      	ldr	r0, [r0, #4]
 23feed8:	f081 0101 	eor.w	r1, r1, #1
 23feedc:	f7ff be80 	b.w	23febe0 <network_listen>

023feee0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23feee0:	2200      	movs	r2, #0
 23feee2:	6840      	ldr	r0, [r0, #4]
 23feee4:	f7ff be98 	b.w	23fec18 <network_set_listen_timeout>

023feee8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23feee8:	2200      	movs	r2, #0
 23feeea:	6840      	ldr	r0, [r0, #4]
 23feeec:	4611      	mov	r1, r2
 23feeee:	f7ff bea1 	b.w	23fec34 <network_get_listen_timeout>

023feef2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23feef2:	2200      	movs	r2, #0
 23feef4:	6840      	ldr	r0, [r0, #4]
 23feef6:	4611      	mov	r1, r2
 23feef8:	f7ff be80 	b.w	23febfc <network_listening>

023feefc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23feefc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fef00:	b095      	sub	sp, #84	; 0x54
 23fef02:	4614      	mov	r4, r2
 23fef04:	460d      	mov	r5, r1
 23fef06:	4607      	mov	r7, r0
    IPAddress addr;
 23fef08:	f7ff ff76 	bl	23fedf8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fef0c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fef0e:	221c      	movs	r2, #28
 23fef10:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fef12:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fef14:	f000 fb63 	bl	23ff5de <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fef18:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fef1a:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fef1c:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fef1e:	2100      	movs	r1, #0
 23fef20:	466b      	mov	r3, sp
 23fef22:	aa0c      	add	r2, sp, #48	; 0x30
 23fef24:	f7ff fcfe 	bl	23fe924 <netdb_getaddrinfo>
    if (!r) {
 23fef28:	4604      	mov	r4, r0
 23fef2a:	2800      	cmp	r0, #0
 23fef2c:	d14b      	bne.n	23fefc6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fef2e:	4602      	mov	r2, r0
 23fef30:	2101      	movs	r1, #1
 23fef32:	6868      	ldr	r0, [r5, #4]
 23fef34:	f7ff fe2a 	bl	23feb8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fef38:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fef3a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fef3c:	4622      	mov	r2, r4
 23fef3e:	6868      	ldr	r0, [r5, #4]
 23fef40:	f7ff fe24 	bl	23feb8c <network_ready>
        bool ok = false;
 23fef44:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fef46:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fef48:	9e00      	ldr	r6, [sp, #0]
 23fef4a:	2e00      	cmp	r6, #0
 23fef4c:	d03b      	beq.n	23fefc6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fef4e:	2900      	cmp	r1, #0
 23fef50:	d139      	bne.n	23fefc6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fef52:	6873      	ldr	r3, [r6, #4]
 23fef54:	2b02      	cmp	r3, #2
 23fef56:	d003      	beq.n	23fef60 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fef58:	2b0a      	cmp	r3, #10
 23fef5a:	d011      	beq.n	23fef80 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fef5c:	69f6      	ldr	r6, [r6, #28]
 23fef5e:	e7f4      	b.n	23fef4a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fef60:	f1b8 0f00 	cmp.w	r8, #0
 23fef64:	d0fa      	beq.n	23fef5c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fef66:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fef68:	a806      	add	r0, sp, #24
 23fef6a:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fef6c:	1d3c      	adds	r4, r7, #4
 23fef6e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fef70:	f7ff ff70 	bl	23fee54 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fef74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fef76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fef78:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fef7a:	4641      	mov	r1, r8
 23fef7c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fef7e:	e7ed      	b.n	23fef5c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fef80:	f1b9 0f00 	cmp.w	r9, #0
 23fef84:	d0ea      	beq.n	23fef5c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fef86:	2210      	movs	r2, #16
 23fef88:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fef8a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fef8c:	f000 fb27 	bl	23ff5de <memset>
                    a.v = 6;
 23fef90:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fef92:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fef94:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fef98:	f104 0308 	add.w	r3, r4, #8
 23fef9c:	3418      	adds	r4, #24
 23fef9e:	462a      	mov	r2, r5
 23fefa0:	6818      	ldr	r0, [r3, #0]
 23fefa2:	6859      	ldr	r1, [r3, #4]
 23fefa4:	3308      	adds	r3, #8
 23fefa6:	c203      	stmia	r2!, {r0, r1}
 23fefa8:	42a3      	cmp	r3, r4
 23fefaa:	4615      	mov	r5, r2
 23fefac:	d1f7      	bne.n	23fef9e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fefae:	a901      	add	r1, sp, #4
 23fefb0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fefb2:	1d3c      	adds	r4, r7, #4
 23fefb4:	ad07      	add	r5, sp, #28
 23fefb6:	f7ff ff2d 	bl	23fee14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fefba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fefbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fefbe:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fefc0:	4649      	mov	r1, r9
 23fefc2:	7023      	strb	r3, [r4, #0]
                    break;
 23fefc4:	e7ca      	b.n	23fef5c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fefc6:	9800      	ldr	r0, [sp, #0]
 23fefc8:	f7ff fc9e 	bl	23fe908 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fefcc:	4638      	mov	r0, r7
 23fefce:	b015      	add	sp, #84	; 0x54
 23fefd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fefd4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fefd4:	4b02      	ldr	r3, [pc, #8]	; (23fefe0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fefd6:	4a03      	ldr	r2, [pc, #12]	; (23fefe4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fefd8:	601a      	str	r2, [r3, #0]
 23fefda:	2200      	movs	r2, #0
 23fefdc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fefde:	4770      	bx	lr
 23fefe0:	1007aeb4 	.word	0x1007aeb4
 23fefe4:	023ffe7c 	.word	0x023ffe7c

023fefe8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fefe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fefea:	4606      	mov	r6, r0
 23fefec:	460d      	mov	r5, r1
  size_t n = 0;
 23fefee:	2400      	movs	r4, #0
 23feff0:	188f      	adds	r7, r1, r2
  while (size--) {
 23feff2:	42bd      	cmp	r5, r7
 23feff4:	d00c      	beq.n	23ff010 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23feff6:	6833      	ldr	r3, [r6, #0]
 23feff8:	4630      	mov	r0, r6
 23feffa:	689b      	ldr	r3, [r3, #8]
 23feffc:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff000:	4798      	blx	r3
     if (chunk>=0)
 23ff002:	1e03      	subs	r3, r0, #0
 23ff004:	db01      	blt.n	23ff00a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff006:	441c      	add	r4, r3
  while (size--) {
 23ff008:	e7f3      	b.n	23feff2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff00a:	2c00      	cmp	r4, #0
 23ff00c:	bf08      	it	eq
 23ff00e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff010:	4620      	mov	r0, r4
 23ff012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff014 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff014:	b513      	push	{r0, r1, r4, lr}
 23ff016:	4604      	mov	r4, r0
    }
 23ff018:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff01a:	b159      	cbz	r1, 23ff034 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff01c:	9101      	str	r1, [sp, #4]
 23ff01e:	f7ff fbef 	bl	23fe800 <strlen>
 23ff022:	4602      	mov	r2, r0
 23ff024:	4620      	mov	r0, r4
 23ff026:	6823      	ldr	r3, [r4, #0]
 23ff028:	9901      	ldr	r1, [sp, #4]
 23ff02a:	68db      	ldr	r3, [r3, #12]
    }
 23ff02c:	b002      	add	sp, #8
 23ff02e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff032:	4718      	bx	r3
    }
 23ff034:	b002      	add	sp, #8
 23ff036:	bd10      	pop	{r4, pc}

023ff038 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23ff038:	6803      	ldr	r3, [r0, #0]
 23ff03a:	689b      	ldr	r3, [r3, #8]
 23ff03c:	4718      	bx	r3

023ff03e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff03e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff040:	2a01      	cmp	r2, #1
 23ff042:	bf98      	it	ls
 23ff044:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff046:	b530      	push	{r4, r5, lr}
 23ff048:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff04a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff04e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff050:	460d      	mov	r5, r1
 23ff052:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff056:	fb01 5312 	mls	r3, r1, r2, r5
 23ff05a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff05e:	2b09      	cmp	r3, #9
 23ff060:	bf94      	ite	ls
 23ff062:	3330      	addls	r3, #48	; 0x30
 23ff064:	3337      	addhi	r3, #55	; 0x37
 23ff066:	b2db      	uxtb	r3, r3
  } while(n);
 23ff068:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff06a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff06e:	d9ef      	bls.n	23ff050 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff070:	4621      	mov	r1, r4
 23ff072:	f7ff ffcf 	bl	23ff014 <_ZN5Print5writeEPKc>
}
 23ff076:	b00b      	add	sp, #44	; 0x2c
 23ff078:	bd30      	pop	{r4, r5, pc}
	...

023ff07c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23ff07c:	2200      	movs	r2, #0
 23ff07e:	4b01      	ldr	r3, [pc, #4]	; (23ff084 <_GLOBAL__sub_I_RGB+0x8>)
 23ff080:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff082:	4770      	bx	lr
 23ff084:	1007aebc 	.word	0x1007aebc

023ff088 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff088:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff08a:	2000      	movs	r0, #0
 23ff08c:	4b04      	ldr	r3, [pc, #16]	; (23ff0a0 <_GLOBAL__sub_I_System+0x18>)
 23ff08e:	601a      	str	r2, [r3, #0]
 23ff090:	4b04      	ldr	r3, [pc, #16]	; (23ff0a4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff092:	4a05      	ldr	r2, [pc, #20]	; (23ff0a8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff094:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff098:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff09a:	f7ff bd15 	b.w	23feac8 <set_system_mode>
 23ff09e:	bf00      	nop
 23ff0a0:	1007aed8 	.word	0x1007aed8
 23ff0a4:	1007aecc 	.word	0x1007aecc
 23ff0a8:	ffff0000 	.word	0xffff0000

023ff0ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff0ac:	4b02      	ldr	r3, [pc, #8]	; (23ff0b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff0ae:	681a      	ldr	r2, [r3, #0]
 23ff0b0:	4b02      	ldr	r3, [pc, #8]	; (23ff0bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff0b2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff0b4:	4770      	bx	lr
 23ff0b6:	bf00      	nop
 23ff0b8:	1007ae34 	.word	0x1007ae34
 23ff0bc:	1007aedc 	.word	0x1007aedc

023ff0c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff0c0:	4770      	bx	lr

023ff0c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff0c2:	7441      	strb	r1, [r0, #17]
}
 23ff0c4:	4770      	bx	lr

023ff0c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff0c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff0c8:	7c00      	ldrb	r0, [r0, #16]
 23ff0ca:	f7ff fc8d 	bl	23fe9e8 <hal_usart_available_data_for_write>
}
 23ff0ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff0d2:	bd08      	pop	{r3, pc}

023ff0d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff0d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff0d6:	7c00      	ldrb	r0, [r0, #16]
 23ff0d8:	f7ff fc40 	bl	23fe95c <hal_usart_available>
}
 23ff0dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff0e0:	bd08      	pop	{r3, pc}

023ff0e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff0e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff0e4:	7c00      	ldrb	r0, [r0, #16]
 23ff0e6:	f7ff fc55 	bl	23fe994 <hal_usart_peek>
}
 23ff0ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff0ee:	bd08      	pop	{r3, pc}

023ff0f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff0f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff0f2:	7c00      	ldrb	r0, [r0, #16]
 23ff0f4:	f7ff fc40 	bl	23fe978 <hal_usart_read>
}
 23ff0f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff0fc:	bd08      	pop	{r3, pc}

023ff0fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff0fe:	7c00      	ldrb	r0, [r0, #16]
 23ff100:	f7ff bc56 	b.w	23fe9b0 <hal_usart_flush>

023ff104 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff104:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff106:	7c45      	ldrb	r5, [r0, #17]
{
 23ff108:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff10a:	b12d      	cbz	r5, 23ff118 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff10c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff10e:	b003      	add	sp, #12
 23ff110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff114:	f7ff bc14 	b.w	23fe940 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff118:	7c00      	ldrb	r0, [r0, #16]
 23ff11a:	9101      	str	r1, [sp, #4]
 23ff11c:	f7ff fc64 	bl	23fe9e8 <hal_usart_available_data_for_write>
 23ff120:	2800      	cmp	r0, #0
 23ff122:	9901      	ldr	r1, [sp, #4]
 23ff124:	dcf2      	bgt.n	23ff10c <_ZN11USARTSerial5writeEh+0x8>
}
 23ff126:	4628      	mov	r0, r5
 23ff128:	b003      	add	sp, #12
 23ff12a:	bd30      	pop	{r4, r5, pc}

023ff12c <_ZN11USARTSerialD0Ev>:
 23ff12c:	b510      	push	{r4, lr}
 23ff12e:	4604      	mov	r4, r0
 23ff130:	2114      	movs	r1, #20
 23ff132:	f7ff fb8c 	bl	23fe84e <_ZdlPvj>
 23ff136:	4620      	mov	r0, r4
 23ff138:	bd10      	pop	{r4, pc}
	...

023ff13c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff13c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23ff13e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff142:	4604      	mov	r4, r0
 23ff144:	4608      	mov	r0, r1
 23ff146:	4611      	mov	r1, r2
 23ff148:	2200      	movs	r2, #0
 23ff14a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff14e:	4b04      	ldr	r3, [pc, #16]	; (23ff160 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff150:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff152:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff154:	2301      	movs	r3, #1
 23ff156:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff158:	f7ff fc54 	bl	23fea04 <hal_usart_init_ex>
}
 23ff15c:	4620      	mov	r0, r4
 23ff15e:	bd10      	pop	{r4, pc}
 23ff160:	023ffed4 	.word	0x023ffed4

023ff164 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff164:	7c00      	ldrb	r0, [r0, #16]
 23ff166:	f7ff bc31 	b.w	23fe9cc <hal_usart_is_enabled>

023ff16a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff16a:	7441      	strb	r1, [r0, #17]
}
 23ff16c:	4770      	bx	lr

023ff16e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff16e:	4770      	bx	lr

023ff170 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff170:	4770      	bx	lr

023ff172 <_ZN9USBSerial4readEv>:
{
 23ff172:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff174:	2100      	movs	r1, #0
 23ff176:	7c00      	ldrb	r0, [r0, #16]
 23ff178:	f7ff fc7c 	bl	23fea74 <HAL_USB_USART_Receive_Data>
}
 23ff17c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff180:	bd08      	pop	{r3, pc}

023ff182 <_ZN9USBSerial4peekEv>:
{
 23ff182:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff184:	2101      	movs	r1, #1
 23ff186:	7c00      	ldrb	r0, [r0, #16]
 23ff188:	f7ff fc74 	bl	23fea74 <HAL_USB_USART_Receive_Data>
}
 23ff18c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff190:	bd08      	pop	{r3, pc}

023ff192 <_ZN9USBSerial17availableForWriteEv>:
{
 23ff192:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff194:	7c00      	ldrb	r0, [r0, #16]
 23ff196:	f7ff fc5f 	bl	23fea58 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff19a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff19e:	bd08      	pop	{r3, pc}

023ff1a0 <_ZN9USBSerial9availableEv>:
{
 23ff1a0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff1a2:	7c00      	ldrb	r0, [r0, #16]
 23ff1a4:	f7ff fc4a 	bl	23fea3c <HAL_USB_USART_Available_Data>
}
 23ff1a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff1ac:	bd08      	pop	{r3, pc}

023ff1ae <_ZN9USBSerial5writeEh>:
{
 23ff1ae:	b513      	push	{r0, r1, r4, lr}
 23ff1b0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff1b2:	7c00      	ldrb	r0, [r0, #16]
{
 23ff1b4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff1b6:	f7ff fc4f 	bl	23fea58 <HAL_USB_USART_Available_Data_For_Write>
 23ff1ba:	2800      	cmp	r0, #0
 23ff1bc:	9901      	ldr	r1, [sp, #4]
 23ff1be:	dc01      	bgt.n	23ff1c4 <_ZN9USBSerial5writeEh+0x16>
 23ff1c0:	7c60      	ldrb	r0, [r4, #17]
 23ff1c2:	b120      	cbz	r0, 23ff1ce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff1c4:	7c20      	ldrb	r0, [r4, #16]
 23ff1c6:	f7ff fc63 	bl	23fea90 <HAL_USB_USART_Send_Data>
 23ff1ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff1ce:	b002      	add	sp, #8
 23ff1d0:	bd10      	pop	{r4, pc}

023ff1d2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff1d2:	7c00      	ldrb	r0, [r0, #16]
 23ff1d4:	f7ff bc6a 	b.w	23feaac <HAL_USB_USART_Flush_Data>

023ff1d8 <_ZN9USBSerialD0Ev>:
 23ff1d8:	b510      	push	{r4, lr}
 23ff1da:	4604      	mov	r4, r0
 23ff1dc:	2114      	movs	r1, #20
 23ff1de:	f7ff fb36 	bl	23fe84e <_ZdlPvj>
 23ff1e2:	4620      	mov	r0, r4
 23ff1e4:	bd10      	pop	{r4, pc}
	...

023ff1e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff1e8:	b510      	push	{r4, lr}
 23ff1ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff1ee:	4604      	mov	r4, r0
 23ff1f0:	4608      	mov	r0, r1
 23ff1f2:	2100      	movs	r1, #0
 23ff1f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff1f8:	4b04      	ldr	r3, [pc, #16]	; (23ff20c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff1fa:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff1fc:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff1fe:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff200:	4611      	mov	r1, r2
  _blocking = true;
 23ff202:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff204:	f7ff fc0c 	bl	23fea20 <HAL_USB_USART_Init>
}
 23ff208:	4620      	mov	r0, r4
 23ff20a:	bd10      	pop	{r4, pc}
 23ff20c:	023fff04 	.word	0x023fff04

023ff210 <_Z19acquireSerialBufferv>:
{
 23ff210:	b510      	push	{r4, lr}
 23ff212:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff214:	2214      	movs	r2, #20
 23ff216:	2100      	movs	r1, #0
 23ff218:	f000 f9e1 	bl	23ff5de <memset>
}
 23ff21c:	4620      	mov	r0, r4
 23ff21e:	bd10      	pop	{r4, pc}

023ff220 <_Z16_fetch_usbserialv>:
{
 23ff220:	b510      	push	{r4, lr}
 23ff222:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff224:	a803      	add	r0, sp, #12
 23ff226:	f7ff fff3 	bl	23ff210 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff22a:	4c0c      	ldr	r4, [pc, #48]	; (23ff25c <_Z16_fetch_usbserialv+0x3c>)
 23ff22c:	e8d4 1f8f 	ldab	r1, [r4]
 23ff230:	f011 0101 	ands.w	r1, r1, #1
 23ff234:	d10f      	bne.n	23ff256 <_Z16_fetch_usbserialv+0x36>
 23ff236:	4620      	mov	r0, r4
 23ff238:	9101      	str	r1, [sp, #4]
 23ff23a:	f7ff fb0a 	bl	23fe852 <__cxa_guard_acquire>
 23ff23e:	9901      	ldr	r1, [sp, #4]
 23ff240:	b148      	cbz	r0, 23ff256 <_Z16_fetch_usbserialv+0x36>
 23ff242:	aa03      	add	r2, sp, #12
 23ff244:	4806      	ldr	r0, [pc, #24]	; (23ff260 <_Z16_fetch_usbserialv+0x40>)
 23ff246:	f7ff ffcf 	bl	23ff1e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff24a:	4620      	mov	r0, r4
 23ff24c:	f7ff fb06 	bl	23fe85c <__cxa_guard_release>
 23ff250:	4804      	ldr	r0, [pc, #16]	; (23ff264 <_Z16_fetch_usbserialv+0x44>)
 23ff252:	f000 f9b1 	bl	23ff5b8 <atexit>
	return _usbserial;
}
 23ff256:	4802      	ldr	r0, [pc, #8]	; (23ff260 <_Z16_fetch_usbserialv+0x40>)
 23ff258:	b008      	add	sp, #32
 23ff25a:	bd10      	pop	{r4, pc}
 23ff25c:	1007aee0 	.word	0x1007aee0
 23ff260:	1007aee4 	.word	0x1007aee4
 23ff264:	023ff16f 	.word	0x023ff16f

023ff268 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff268:	2200      	movs	r2, #0
 23ff26a:	6840      	ldr	r0, [r0, #4]
 23ff26c:	4611      	mov	r1, r2
 23ff26e:	f7ff bc8d 	b.w	23feb8c <network_ready>

023ff272 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff272:	2200      	movs	r2, #0
 23ff274:	6840      	ldr	r0, [r0, #4]
 23ff276:	4611      	mov	r1, r2
 23ff278:	f7ff bcc0 	b.w	23febfc <network_listening>

023ff27c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff27c:	2200      	movs	r2, #0
 23ff27e:	6840      	ldr	r0, [r0, #4]
 23ff280:	4611      	mov	r1, r2
 23ff282:	f7ff bcd7 	b.w	23fec34 <network_get_listen_timeout>

023ff286 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff286:	2200      	movs	r2, #0
 23ff288:	6840      	ldr	r0, [r0, #4]
 23ff28a:	f7ff bcc5 	b.w	23fec18 <network_set_listen_timeout>

023ff28e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff28e:	2200      	movs	r2, #0
 23ff290:	6840      	ldr	r0, [r0, #4]
 23ff292:	f081 0101 	eor.w	r1, r1, #1
 23ff296:	f7ff bca3 	b.w	23febe0 <network_listen>

023ff29a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff29a:	2300      	movs	r3, #0
 23ff29c:	6840      	ldr	r0, [r0, #4]
 23ff29e:	461a      	mov	r2, r3
 23ff2a0:	4619      	mov	r1, r3
 23ff2a2:	f7ff bc8f 	b.w	23febc4 <network_off>

023ff2a6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff2a6:	2300      	movs	r3, #0
 23ff2a8:	6840      	ldr	r0, [r0, #4]
 23ff2aa:	461a      	mov	r2, r3
 23ff2ac:	4619      	mov	r1, r3
 23ff2ae:	f7ff bc7b 	b.w	23feba8 <network_on>

023ff2b2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff2b2:	2200      	movs	r2, #0
 23ff2b4:	6840      	ldr	r0, [r0, #4]
 23ff2b6:	4611      	mov	r1, r2
 23ff2b8:	f7ff bc4c 	b.w	23feb54 <network_connecting>

023ff2bc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff2bc:	2200      	movs	r2, #0
 23ff2be:	2102      	movs	r1, #2
 23ff2c0:	6840      	ldr	r0, [r0, #4]
 23ff2c2:	f7ff bc55 	b.w	23feb70 <network_disconnect>

023ff2c6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff2c6:	2300      	movs	r3, #0
 23ff2c8:	6840      	ldr	r0, [r0, #4]
 23ff2ca:	461a      	mov	r2, r3
 23ff2cc:	f7ff bc34 	b.w	23feb38 <network_connect>

023ff2d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff2d0:	2204      	movs	r2, #4
 23ff2d2:	4b02      	ldr	r3, [pc, #8]	; (23ff2dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff2d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff2d6:	4a02      	ldr	r2, [pc, #8]	; (23ff2e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff2d8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff2da:	4770      	bx	lr
 23ff2dc:	1007aef8 	.word	0x1007aef8
 23ff2e0:	023fff34 	.word	0x023fff34

023ff2e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff2e4:	4b01      	ldr	r3, [pc, #4]	; (23ff2ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff2e6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff2e8:	4770      	bx	lr
 23ff2ea:	bf00      	nop
 23ff2ec:	1007ae38 	.word	0x1007ae38

023ff2f0 <serialEventRun>:
{
 23ff2f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff2f2:	4b0f      	ldr	r3, [pc, #60]	; (23ff330 <serialEventRun+0x40>)
 23ff2f4:	b143      	cbz	r3, 23ff308 <serialEventRun+0x18>
 23ff2f6:	f7ff ff93 	bl	23ff220 <_Z16_fetch_usbserialv>
 23ff2fa:	6803      	ldr	r3, [r0, #0]
 23ff2fc:	691b      	ldr	r3, [r3, #16]
 23ff2fe:	4798      	blx	r3
 23ff300:	2800      	cmp	r0, #0
 23ff302:	dd01      	ble.n	23ff308 <serialEventRun+0x18>
        serialEvent();
 23ff304:	e000      	b.n	23ff308 <serialEventRun+0x18>
 23ff306:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff308:	4b0a      	ldr	r3, [pc, #40]	; (23ff334 <serialEventRun+0x44>)
 23ff30a:	b143      	cbz	r3, 23ff31e <serialEventRun+0x2e>
 23ff30c:	f000 f8c2 	bl	23ff494 <_Z22__fetch_global_Serial1v>
 23ff310:	6803      	ldr	r3, [r0, #0]
 23ff312:	691b      	ldr	r3, [r3, #16]
 23ff314:	4798      	blx	r3
 23ff316:	2800      	cmp	r0, #0
 23ff318:	dd01      	ble.n	23ff31e <serialEventRun+0x2e>
        serialEvent1();
 23ff31a:	e000      	b.n	23ff31e <serialEventRun+0x2e>
 23ff31c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff31e:	4b06      	ldr	r3, [pc, #24]	; (23ff338 <serialEventRun+0x48>)
 23ff320:	b10b      	cbz	r3, 23ff326 <serialEventRun+0x36>
 23ff322:	f000 f8fd 	bl	23ff520 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff326:	4b05      	ldr	r3, [pc, #20]	; (23ff33c <serialEventRun+0x4c>)
 23ff328:	b10b      	cbz	r3, 23ff32e <serialEventRun+0x3e>
 23ff32a:	f000 f92f 	bl	23ff58c <_Z15serialEventRun3v>
}
 23ff32e:	bd08      	pop	{r3, pc}
	...

023ff340 <_post_loop>:
{
 23ff340:	b508      	push	{r3, lr}
	serialEventRun();
 23ff342:	f7ff ffd5 	bl	23ff2f0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff346:	f7ff fac3 	bl	23fe8d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff34a:	4b01      	ldr	r3, [pc, #4]	; (23ff350 <_post_loop+0x10>)
 23ff34c:	6018      	str	r0, [r3, #0]
}
 23ff34e:	bd08      	pop	{r3, pc}
 23ff350:	1007af08 	.word	0x1007af08

023ff354 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff354:	4805      	ldr	r0, [pc, #20]	; (23ff36c <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff356:	4a06      	ldr	r2, [pc, #24]	; (23ff370 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff358:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff35a:	1a12      	subs	r2, r2, r0
 23ff35c:	4905      	ldr	r1, [pc, #20]	; (23ff374 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff35e:	f000 f931 	bl	23ff5c4 <memcpy>
    __backup_sram_signature = signature;
 23ff362:	4b05      	ldr	r3, [pc, #20]	; (23ff378 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff364:	4a05      	ldr	r2, [pc, #20]	; (23ff37c <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff366:	601a      	str	r2, [r3, #0]
}
 23ff368:	bd08      	pop	{r3, pc}
 23ff36a:	bf00      	nop
 23ff36c:	1007b400 	.word	0x1007b400
 23ff370:	1007b404 	.word	0x1007b404
 23ff374:	085ffa50 	.word	0x085ffa50
 23ff378:	1007b400 	.word	0x1007b400
 23ff37c:	9a271c1e 	.word	0x9a271c1e

023ff380 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff380:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff382:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff384:	461a      	mov	r2, r3
 23ff386:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff38a:	9300      	str	r3, [sp, #0]
 23ff38c:	f7ff fbb8 	bl	23feb00 <system_ctrl_set_result>
}
 23ff390:	b003      	add	sp, #12
 23ff392:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff398 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff398:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff39a:	8843      	ldrh	r3, [r0, #2]
 23ff39c:	2b0a      	cmp	r3, #10
 23ff39e:	d008      	beq.n	23ff3b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff3a0:	2b50      	cmp	r3, #80	; 0x50
 23ff3a2:	d10b      	bne.n	23ff3bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff3a4:	4b09      	ldr	r3, [pc, #36]	; (23ff3cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff3a6:	681b      	ldr	r3, [r3, #0]
 23ff3a8:	b14b      	cbz	r3, 23ff3be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff3aa:	b003      	add	sp, #12
 23ff3ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff3b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff3b2:	f7ff ffe5 	bl	23ff380 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff3b6:	b003      	add	sp, #12
 23ff3b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff3bc:	2300      	movs	r3, #0
 23ff3be:	461a      	mov	r2, r3
 23ff3c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff3c4:	9300      	str	r3, [sp, #0]
 23ff3c6:	f7ff fb9b 	bl	23feb00 <system_ctrl_set_result>
}
 23ff3ca:	e7f4      	b.n	23ff3b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff3cc:	1007af04 	.word	0x1007af04

023ff3d0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff3d0:	2100      	movs	r1, #0
{
 23ff3d2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff3d4:	4811      	ldr	r0, [pc, #68]	; (23ff41c <module_user_init_hook+0x4c>)
 23ff3d6:	f7ff fc81 	bl	23fecdc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff3da:	4b11      	ldr	r3, [pc, #68]	; (23ff420 <module_user_init_hook+0x50>)
 23ff3dc:	681a      	ldr	r2, [r3, #0]
 23ff3de:	4b11      	ldr	r3, [pc, #68]	; (23ff424 <module_user_init_hook+0x54>)
 23ff3e0:	429a      	cmp	r2, r3
 23ff3e2:	bf0c      	ite	eq
 23ff3e4:	2201      	moveq	r2, #1
 23ff3e6:	2200      	movne	r2, #0
 23ff3e8:	4b0f      	ldr	r3, [pc, #60]	; (23ff428 <module_user_init_hook+0x58>)
 23ff3ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff3ec:	d001      	beq.n	23ff3f2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff3ee:	f7ff ffb1 	bl	23ff354 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff3f2:	f7ff fa5f 	bl	23fe8b4 <HAL_RNG_GetRandomNumber>
 23ff3f6:	4604      	mov	r4, r0
    srand(seed);
 23ff3f8:	f000 f8fa 	bl	23ff5f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff3fc:	4b0b      	ldr	r3, [pc, #44]	; (23ff42c <module_user_init_hook+0x5c>)
 23ff3fe:	b113      	cbz	r3, 23ff406 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff400:	4620      	mov	r0, r4
 23ff402:	e000      	b.n	23ff406 <module_user_init_hook+0x36>
 23ff404:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff406:	2100      	movs	r1, #0
 23ff408:	4808      	ldr	r0, [pc, #32]	; (23ff42c <module_user_init_hook+0x5c>)
 23ff40a:	f7ff fb87 	bl	23feb1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff412:	2100      	movs	r1, #0
 23ff414:	4806      	ldr	r0, [pc, #24]	; (23ff430 <module_user_init_hook+0x60>)
 23ff416:	f7ff bb65 	b.w	23feae4 <system_ctrl_set_app_request_handler>
 23ff41a:	bf00      	nop
 23ff41c:	023ff2e5 	.word	0x023ff2e5
 23ff420:	1007b400 	.word	0x1007b400
 23ff424:	9a271c1e 	.word	0x9a271c1e
 23ff428:	1007af00 	.word	0x1007af00
 23ff42c:	00000000 	.word	0x00000000
 23ff430:	023ff399 	.word	0x023ff399

023ff434 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff434:	4770      	bx	lr
	...

023ff438 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff438:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff43a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff43c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff43e:	462a      	mov	r2, r5
 23ff440:	2100      	movs	r1, #0
 23ff442:	f000 f8cc 	bl	23ff5de <memset>
 23ff446:	8025      	strh	r5, [r4, #0]
 23ff448:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff44a:	4907      	ldr	r1, [pc, #28]	; (23ff468 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff44c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff44e:	8125      	strh	r5, [r4, #8]
 23ff450:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff452:	f000 f8af 	bl	23ff5b4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff456:	4904      	ldr	r1, [pc, #16]	; (23ff468 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff458:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff45a:	4628      	mov	r0, r5
 23ff45c:	f000 f8aa 	bl	23ff5b4 <_ZnajRKSt9nothrow_t>
    };
 23ff460:	60e0      	str	r0, [r4, #12]
}
 23ff462:	4620      	mov	r0, r4
 23ff464:	bd38      	pop	{r3, r4, r5, pc}
 23ff466:	bf00      	nop
 23ff468:	023fff68 	.word	0x023fff68

023ff46c <__tcf_2>:
 23ff46c:	4770      	bx	lr

023ff46e <__tcf_1>:
 23ff46e:	4770      	bx	lr

023ff470 <_Z20acquireSerial1Bufferv>:
{
 23ff470:	b510      	push	{r4, lr}
 23ff472:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff474:	f7ff ffe0 	bl	23ff438 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff478:	4620      	mov	r0, r4
 23ff47a:	bd10      	pop	{r4, pc}

023ff47c <_Z20acquireSerial2Bufferv>:
 23ff47c:	b510      	push	{r4, lr}
 23ff47e:	4604      	mov	r4, r0
 23ff480:	f7ff ffda 	bl	23ff438 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff484:	4620      	mov	r0, r4
 23ff486:	bd10      	pop	{r4, pc}

023ff488 <_Z20acquireSerial3Bufferv>:
 23ff488:	b510      	push	{r4, lr}
 23ff48a:	4604      	mov	r4, r0
 23ff48c:	f7ff ffd4 	bl	23ff438 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff490:	4620      	mov	r0, r4
 23ff492:	bd10      	pop	{r4, pc}

023ff494 <_Z22__fetch_global_Serial1v>:
{
 23ff494:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff496:	4d0e      	ldr	r5, [pc, #56]	; (23ff4d0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff498:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff49a:	e8d5 1f8f 	ldab	r1, [r5]
 23ff49e:	f011 0401 	ands.w	r4, r1, #1
 23ff4a2:	d111      	bne.n	23ff4c8 <_Z22__fetch_global_Serial1v+0x34>
 23ff4a4:	4628      	mov	r0, r5
 23ff4a6:	f7ff f9d4 	bl	23fe852 <__cxa_guard_acquire>
 23ff4aa:	b168      	cbz	r0, 23ff4c8 <_Z22__fetch_global_Serial1v+0x34>
 23ff4ac:	a801      	add	r0, sp, #4
 23ff4ae:	f7ff ffdf 	bl	23ff470 <_Z20acquireSerial1Bufferv>
 23ff4b2:	4621      	mov	r1, r4
 23ff4b4:	aa01      	add	r2, sp, #4
 23ff4b6:	4807      	ldr	r0, [pc, #28]	; (23ff4d4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff4b8:	f7ff fe40 	bl	23ff13c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff4bc:	4628      	mov	r0, r5
 23ff4be:	f7ff f9cd 	bl	23fe85c <__cxa_guard_release>
 23ff4c2:	4805      	ldr	r0, [pc, #20]	; (23ff4d8 <_Z22__fetch_global_Serial1v+0x44>)
 23ff4c4:	f000 f878 	bl	23ff5b8 <atexit>
    return serial1;
}
 23ff4c8:	4802      	ldr	r0, [pc, #8]	; (23ff4d4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff4ca:	b007      	add	sp, #28
 23ff4cc:	bd30      	pop	{r4, r5, pc}
 23ff4ce:	bf00      	nop
 23ff4d0:	1007af0c 	.word	0x1007af0c
 23ff4d4:	1007af18 	.word	0x1007af18
 23ff4d8:	023ff435 	.word	0x023ff435

023ff4dc <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff4dc:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff4de:	4c0d      	ldr	r4, [pc, #52]	; (23ff514 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff4e0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff4e2:	e8d4 3f8f 	ldab	r3, [r4]
 23ff4e6:	07db      	lsls	r3, r3, #31
 23ff4e8:	d411      	bmi.n	23ff50e <_Z22__fetch_global_Serial2v+0x32>
 23ff4ea:	4620      	mov	r0, r4
 23ff4ec:	f7ff f9b1 	bl	23fe852 <__cxa_guard_acquire>
 23ff4f0:	b168      	cbz	r0, 23ff50e <_Z22__fetch_global_Serial2v+0x32>
 23ff4f2:	a801      	add	r0, sp, #4
 23ff4f4:	f7ff ffc2 	bl	23ff47c <_Z20acquireSerial2Bufferv>
 23ff4f8:	2101      	movs	r1, #1
 23ff4fa:	aa01      	add	r2, sp, #4
 23ff4fc:	4806      	ldr	r0, [pc, #24]	; (23ff518 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff4fe:	f7ff fe1d 	bl	23ff13c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff502:	4620      	mov	r0, r4
 23ff504:	f7ff f9aa 	bl	23fe85c <__cxa_guard_release>
 23ff508:	4804      	ldr	r0, [pc, #16]	; (23ff51c <_Z22__fetch_global_Serial2v+0x40>)
 23ff50a:	f000 f855 	bl	23ff5b8 <atexit>
	return serial2;
}
 23ff50e:	4802      	ldr	r0, [pc, #8]	; (23ff518 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff510:	b006      	add	sp, #24
 23ff512:	bd10      	pop	{r4, pc}
 23ff514:	1007af10 	.word	0x1007af10
 23ff518:	1007af2c 	.word	0x1007af2c
 23ff51c:	023ff46f 	.word	0x023ff46f

023ff520 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff520:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff522:	f7ff ffdb 	bl	23ff4dc <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff526:	4b07      	ldr	r3, [pc, #28]	; (23ff544 <_Z15serialEventRun2v+0x24>)
 23ff528:	4604      	mov	r4, r0
 23ff52a:	b153      	cbz	r3, 23ff542 <_Z15serialEventRun2v+0x22>
 23ff52c:	f7ff fe1a 	bl	23ff164 <_ZN11USARTSerial9isEnabledEv>
 23ff530:	b138      	cbz	r0, 23ff542 <_Z15serialEventRun2v+0x22>
 23ff532:	6823      	ldr	r3, [r4, #0]
 23ff534:	4620      	mov	r0, r4
 23ff536:	691b      	ldr	r3, [r3, #16]
 23ff538:	4798      	blx	r3
 23ff53a:	2800      	cmp	r0, #0
 23ff53c:	dd01      	ble.n	23ff542 <_Z15serialEventRun2v+0x22>
        handler();
 23ff53e:	e000      	b.n	23ff542 <_Z15serialEventRun2v+0x22>
 23ff540:	bf00      	nop
}
 23ff542:	bd10      	pop	{r4, pc}
 23ff544:	00000000 	.word	0x00000000

023ff548 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff548:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff54a:	4c0d      	ldr	r4, [pc, #52]	; (23ff580 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff54c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff54e:	e8d4 3f8f 	ldab	r3, [r4]
 23ff552:	07db      	lsls	r3, r3, #31
 23ff554:	d411      	bmi.n	23ff57a <_Z22__fetch_global_Serial3v+0x32>
 23ff556:	4620      	mov	r0, r4
 23ff558:	f7ff f97b 	bl	23fe852 <__cxa_guard_acquire>
 23ff55c:	b168      	cbz	r0, 23ff57a <_Z22__fetch_global_Serial3v+0x32>
 23ff55e:	a801      	add	r0, sp, #4
 23ff560:	f7ff ff92 	bl	23ff488 <_Z20acquireSerial3Bufferv>
 23ff564:	2102      	movs	r1, #2
 23ff566:	aa01      	add	r2, sp, #4
 23ff568:	4806      	ldr	r0, [pc, #24]	; (23ff584 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff56a:	f7ff fde7 	bl	23ff13c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff56e:	4620      	mov	r0, r4
 23ff570:	f7ff f974 	bl	23fe85c <__cxa_guard_release>
 23ff574:	4804      	ldr	r0, [pc, #16]	; (23ff588 <_Z22__fetch_global_Serial3v+0x40>)
 23ff576:	f000 f81f 	bl	23ff5b8 <atexit>
	return serial3;
}
 23ff57a:	4802      	ldr	r0, [pc, #8]	; (23ff584 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff57c:	b006      	add	sp, #24
 23ff57e:	bd10      	pop	{r4, pc}
 23ff580:	1007af14 	.word	0x1007af14
 23ff584:	1007af40 	.word	0x1007af40
 23ff588:	023ff46d 	.word	0x023ff46d

023ff58c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff58c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff58e:	f7ff ffdb 	bl	23ff548 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff592:	4b07      	ldr	r3, [pc, #28]	; (23ff5b0 <_Z15serialEventRun3v+0x24>)
 23ff594:	4604      	mov	r4, r0
 23ff596:	b153      	cbz	r3, 23ff5ae <_Z15serialEventRun3v+0x22>
 23ff598:	f7ff fde4 	bl	23ff164 <_ZN11USARTSerial9isEnabledEv>
 23ff59c:	b138      	cbz	r0, 23ff5ae <_Z15serialEventRun3v+0x22>
 23ff59e:	6823      	ldr	r3, [r4, #0]
 23ff5a0:	4620      	mov	r0, r4
 23ff5a2:	691b      	ldr	r3, [r3, #16]
 23ff5a4:	4798      	blx	r3
 23ff5a6:	2800      	cmp	r0, #0
 23ff5a8:	dd01      	ble.n	23ff5ae <_Z15serialEventRun3v+0x22>
        handler();
 23ff5aa:	e000      	b.n	23ff5ae <_Z15serialEventRun3v+0x22>
 23ff5ac:	bf00      	nop
}
 23ff5ae:	bd10      	pop	{r4, pc}
 23ff5b0:	00000000 	.word	0x00000000

023ff5b4 <_ZnajRKSt9nothrow_t>:
 23ff5b4:	f7ff b949 	b.w	23fe84a <_Znaj>

023ff5b8 <atexit>:
 23ff5b8:	2300      	movs	r3, #0
 23ff5ba:	4601      	mov	r1, r0
 23ff5bc:	461a      	mov	r2, r3
 23ff5be:	4618      	mov	r0, r3
 23ff5c0:	f000 b844 	b.w	23ff64c <__register_exitproc>

023ff5c4 <memcpy>:
 23ff5c4:	440a      	add	r2, r1
 23ff5c6:	1e43      	subs	r3, r0, #1
 23ff5c8:	4291      	cmp	r1, r2
 23ff5ca:	d100      	bne.n	23ff5ce <memcpy+0xa>
 23ff5cc:	4770      	bx	lr
 23ff5ce:	b510      	push	{r4, lr}
 23ff5d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff5d4:	4291      	cmp	r1, r2
 23ff5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff5da:	d1f9      	bne.n	23ff5d0 <memcpy+0xc>
 23ff5dc:	bd10      	pop	{r4, pc}

023ff5de <memset>:
 23ff5de:	4402      	add	r2, r0
 23ff5e0:	4603      	mov	r3, r0
 23ff5e2:	4293      	cmp	r3, r2
 23ff5e4:	d100      	bne.n	23ff5e8 <memset+0xa>
 23ff5e6:	4770      	bx	lr
 23ff5e8:	f803 1b01 	strb.w	r1, [r3], #1
 23ff5ec:	e7f9      	b.n	23ff5e2 <memset+0x4>
	...

023ff5f0 <srand>:
 23ff5f0:	b538      	push	{r3, r4, r5, lr}
 23ff5f2:	4b10      	ldr	r3, [pc, #64]	; (23ff634 <srand+0x44>)
 23ff5f4:	4604      	mov	r4, r0
 23ff5f6:	681d      	ldr	r5, [r3, #0]
 23ff5f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff5fa:	b9b3      	cbnz	r3, 23ff62a <srand+0x3a>
 23ff5fc:	2018      	movs	r0, #24
 23ff5fe:	f7ff fb43 	bl	23fec88 <malloc>
 23ff602:	4602      	mov	r2, r0
 23ff604:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff606:	b920      	cbnz	r0, 23ff612 <srand+0x22>
 23ff608:	4b0b      	ldr	r3, [pc, #44]	; (23ff638 <srand+0x48>)
 23ff60a:	2142      	movs	r1, #66	; 0x42
 23ff60c:	480b      	ldr	r0, [pc, #44]	; (23ff63c <srand+0x4c>)
 23ff60e:	f7ff fb57 	bl	23fecc0 <__assert_func>
 23ff612:	490b      	ldr	r1, [pc, #44]	; (23ff640 <srand+0x50>)
 23ff614:	4b0b      	ldr	r3, [pc, #44]	; (23ff644 <srand+0x54>)
 23ff616:	e9c0 1300 	strd	r1, r3, [r0]
 23ff61a:	4b0b      	ldr	r3, [pc, #44]	; (23ff648 <srand+0x58>)
 23ff61c:	2100      	movs	r1, #0
 23ff61e:	6083      	str	r3, [r0, #8]
 23ff620:	230b      	movs	r3, #11
 23ff622:	8183      	strh	r3, [r0, #12]
 23ff624:	2001      	movs	r0, #1
 23ff626:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff62a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff62c:	2200      	movs	r2, #0
 23ff62e:	611c      	str	r4, [r3, #16]
 23ff630:	615a      	str	r2, [r3, #20]
 23ff632:	bd38      	pop	{r3, r4, r5, pc}
 23ff634:	1007ae38 	.word	0x1007ae38
 23ff638:	023fff69 	.word	0x023fff69
 23ff63c:	023fff80 	.word	0x023fff80
 23ff640:	abcd330e 	.word	0xabcd330e
 23ff644:	e66d1234 	.word	0xe66d1234
 23ff648:	0005deec 	.word	0x0005deec

023ff64c <__register_exitproc>:
 23ff64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff650:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff710 <__register_exitproc+0xc4>
 23ff654:	4606      	mov	r6, r0
 23ff656:	461f      	mov	r7, r3
 23ff658:	460d      	mov	r5, r1
 23ff65a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff65e:	4691      	mov	r9, r2
 23ff660:	f000 f858 	bl	23ff714 <__retarget_lock_acquire_recursive>
 23ff664:	4b26      	ldr	r3, [pc, #152]	; (23ff700 <__register_exitproc+0xb4>)
 23ff666:	681c      	ldr	r4, [r3, #0]
 23ff668:	b934      	cbnz	r4, 23ff678 <__register_exitproc+0x2c>
 23ff66a:	4c26      	ldr	r4, [pc, #152]	; (23ff704 <__register_exitproc+0xb8>)
 23ff66c:	601c      	str	r4, [r3, #0]
 23ff66e:	4b26      	ldr	r3, [pc, #152]	; (23ff708 <__register_exitproc+0xbc>)
 23ff670:	b113      	cbz	r3, 23ff678 <__register_exitproc+0x2c>
 23ff672:	681b      	ldr	r3, [r3, #0]
 23ff674:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff678:	6863      	ldr	r3, [r4, #4]
 23ff67a:	2b1f      	cmp	r3, #31
 23ff67c:	dd07      	ble.n	23ff68e <__register_exitproc+0x42>
 23ff67e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff682:	f000 f849 	bl	23ff718 <__retarget_lock_release_recursive>
 23ff686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff68e:	b35e      	cbz	r6, 23ff6e8 <__register_exitproc+0x9c>
 23ff690:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff694:	b988      	cbnz	r0, 23ff6ba <__register_exitproc+0x6e>
 23ff696:	4b1d      	ldr	r3, [pc, #116]	; (23ff70c <__register_exitproc+0xc0>)
 23ff698:	b923      	cbnz	r3, 23ff6a4 <__register_exitproc+0x58>
 23ff69a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff69e:	f000 f83a 	bl	23ff716 <__retarget_lock_release>
 23ff6a2:	e7f0      	b.n	23ff686 <__register_exitproc+0x3a>
 23ff6a4:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff6a8:	f7ff faee 	bl	23fec88 <malloc>
 23ff6ac:	2800      	cmp	r0, #0
 23ff6ae:	d0f4      	beq.n	23ff69a <__register_exitproc+0x4e>
 23ff6b0:	2300      	movs	r3, #0
 23ff6b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff6b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff6ba:	6863      	ldr	r3, [r4, #4]
 23ff6bc:	2201      	movs	r2, #1
 23ff6be:	2e02      	cmp	r6, #2
 23ff6c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff6c4:	fa02 f203 	lsl.w	r2, r2, r3
 23ff6c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff6cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff6d0:	ea43 0302 	orr.w	r3, r3, r2
 23ff6d4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff6d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff6dc:	bf02      	ittt	eq
 23ff6de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff6e2:	4313      	orreq	r3, r2
 23ff6e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff6e8:	6863      	ldr	r3, [r4, #4]
 23ff6ea:	f8d8 0000 	ldr.w	r0, [r8]
 23ff6ee:	1c5a      	adds	r2, r3, #1
 23ff6f0:	3302      	adds	r3, #2
 23ff6f2:	6062      	str	r2, [r4, #4]
 23ff6f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff6f8:	f000 f80e 	bl	23ff718 <__retarget_lock_release_recursive>
 23ff6fc:	2000      	movs	r0, #0
 23ff6fe:	e7c4      	b.n	23ff68a <__register_exitproc+0x3e>
 23ff700:	1007afe0 	.word	0x1007afe0
 23ff704:	1007af54 	.word	0x1007af54
 23ff708:	00000000 	.word	0x00000000
 23ff70c:	023fec89 	.word	0x023fec89
 23ff710:	1007ae9c 	.word	0x1007ae9c

023ff714 <__retarget_lock_acquire_recursive>:
 23ff714:	4770      	bx	lr

023ff716 <__retarget_lock_release>:
 23ff716:	4770      	bx	lr

023ff718 <__retarget_lock_release_recursive>:
 23ff718:	4770      	bx	lr
	...

023ff71c <dynalib_user>:
 23ff71c:	e811 023f e839 023f e83d 023f 0000 0000     ..?.9.?.=.?.....

023ff72c <_ZN12_GLOBAL__N_1L11quant0_zeroE>:
 23ff72c:	0001 0000 ffb8 ffff                         ........

023ff734 <_ZN12_GLOBAL__N_1L11quant1_zeroE>:
 23ff734:	0001 0000 0000 0000                         ........

023ff73c <_ZN12_GLOBAL__N_1L11quant2_zeroE>:
 23ff73c:	0001 0000 0000 0000                         ........

023ff744 <_ZN12_GLOBAL__N_1L11quant3_zeroE>:
 23ff744:	0001 0000 0000 0000                         ........

023ff74c <_ZN12_GLOBAL__N_1L11quant4_zeroE>:
 23ff74c:	0001 0000 0000 0000                         ........

023ff754 <_ZN12_GLOBAL__N_1L11quant5_zeroE>:
 23ff754:	0001 0000 0000 0000                         ........

023ff75c <_ZN12_GLOBAL__N_1L11quant6_zeroE>:
 23ff75c:	0001 0000 0000 0000                         ........

023ff764 <_ZN12_GLOBAL__N_1L11quant7_zeroE>:
 23ff764:	0001 0000 0000 0000                         ........

023ff76c <_ZN12_GLOBAL__N_1L11quant8_zeroE>:
 23ff76c:	0001 0000 0000 0000                         ........

023ff774 <_ZN12_GLOBAL__N_1L11quant9_zeroE>:
 23ff774:	0001 0000 ff80 ffff                         ........

023ff77c <_ZN12_GLOBAL__N_1L12quant0_scaleE>:
 23ff77c:	0001 0000 05a3 3dcf                         .......=

023ff784 <_ZN12_GLOBAL__N_1L12quant10_zeroE>:
 23ff784:	0001 0000 ff80 ffff                         ........

023ff78c <_ZN12_GLOBAL__N_1L12quant11_zeroE>:
 23ff78c:	0001 0000 ff80 ffff                         ........

023ff794 <_ZN12_GLOBAL__N_1L12quant12_zeroE>:
 23ff794:	0001 0000 002b 0000                         ....+...

023ff79c <_ZN12_GLOBAL__N_1L12quant13_zeroE>:
 23ff79c:	0001 0000 ff80 ffff                         ........

023ff7a4 <_ZN12_GLOBAL__N_1L12quant1_scaleE>:
 23ff7a4:	0001 0000 ac3b 3b94                         ....;..;

023ff7ac <_ZN12_GLOBAL__N_1L12quant2_scaleE>:
 23ff7ac:	0001 0000 7513 39f0                         .....u.9

023ff7b4 <_ZN12_GLOBAL__N_1L12quant3_scaleE>:
 23ff7b4:	0001 0000 5536 3bbf                         ....6U.;

023ff7bc <_ZN12_GLOBAL__N_1L12quant4_scaleE>:
 23ff7bc:	0001 0000 e909 39f5                         .......9

023ff7c4 <_ZN12_GLOBAL__N_1L12quant5_scaleE>:
 23ff7c4:	0001 0000 077d 3bd8                         ....}..;

023ff7cc <_ZN12_GLOBAL__N_1L12quant6_scaleE>:
 23ff7cc:	0001 0000 2721 3a07                         ....!'.:

023ff7d4 <_ZN12_GLOBAL__N_1L12quant7_scaleE>:
 23ff7d4:	0001 0000 1ca3 3bf5                         .......;

023ff7dc <_ZN12_GLOBAL__N_1L12quant8_scaleE>:
 23ff7dc:	0001 0000 624e 3a13                         ....Nb.:

023ff7e4 <_ZN12_GLOBAL__N_1L12quant9_scaleE>:
 23ff7e4:	0001 0000 8307 3da4 0000 0000               .......=....

023ff7f0 <_ZN12_GLOBAL__N_1L12tensor_data1E>:
 23ff7f0:	e1c6 21c9 1806 d6d6 17d5 d13f 2ceb 442d     ...!......?..,-D
 23ff800:	d733 b71d 991f eb70 ffb9 44e2 0908 e5f7     3.....p....D....
 23ff810:	0631 1b19 fbd1 172f ab23 0b15 0cd2 c0df     1...../.#.......
 23ff820:	cdcc 19ab e006 c6bd 1edc 11d5 d721 3802     ............!..8
 23ff830:	b440 cfef 28c2 1803 fac4 18ce f5f2 d0e4     @....(..........
 23ff840:	c73a f6d5 bc45 f436 40f5 57ca ed12 d8fd     :...E.6..@.W....
 23ff850:	44d9 98de bcf5 2831 df26 191c 1754 00d3     .D....1(&...T...
 23ff860:	2cff 07f6 5b08 c93e 5ae6 04e8 1758 4dff     .,...[>..Z..X..M
 23ff870:	1b21 2a54 1cfa 26db 380f d9be 0c04 fd0e     !.T*...&.8......
 23ff880:	fd01 f4b9 d6d3 0106 d4ff fce0 da0f 1a3b     ..............;.
 23ff890:	fd40 da04 3fdf e9db 0cfd 2026 1027 efd6     @....?....& '...
 23ff8a0:	2cc1 24fe d906 2b10 d237 dcbb e2df fc0e     .,.$...+7.......
 23ff8b0:	10cf 0801 e92b 33c4 e1fd 16ec f014 30ea     ....+..3.......0
 23ff8c0:	cbda db9c 2647 3708 0123 1c2a 9a3f fe37     ....G&.7#.*.?.7.
 23ff8d0:	12e0 f81c fb30 03e1 d237 b8e3 fd37 2eaf     ....0...7...7...
 23ff8e0:	22ba c8f9 cfe8 f5ef fabc dfe0 cdbc 02dd     ."..............
 23ff8f0:	44d3 2b27 d044 d04e 0344 c638 2a37 fcf4     .D'+D.N.D.8.7*..
 23ff900:	cc36 39b6 0d12 cca2 e501 f125 d5e3 cded     6..9......%.....
 23ff910:	35f4 0cc3 ff39 0ddd f8b6 1310 cb2e 0507     .5..9...........
 23ff920:	30ef 0cfd e0e4 0a05 18e5 4045 32ca f1d4     .0........E@.2..
 23ff930:	3249 d8ba 30c3 b61a ea05 b2c1 b7d4 d633     I2...0........3.
 23ff940:	ec06 20f8 38f4 5813 bce9 20c5 eadc f6cb     ... .8.X... ....
 23ff950:	aa32 1af5 2bce c81d f64a 55ba 0b0c 0cf3     2....+..J..U....
 23ff960:	1247 4131 ee40 f82f c8ea 071f 2c23 1a2e     G.1A@./.....#,..
 23ff970:	f5da 4ee6 f0c3 d538 c633 c921 360d c918     ...N..8.3.!..6..
 23ff980:	db28 d205 35e7 dcea 45d2 b33d f81d e9b5     (....5...E=.....
 23ff990:	eab5 ed4f 00d6 21d2 f248 f840 12f8 d423     ..O....!H.@...#.
 23ff9a0:	1844 3300 1801 4e40 3760 1dbe e51d 31ef     D..3..@N`7.....1
 23ff9b0:	d452 24ef 8129 2f4a 3f14 abd9 083a c3c9     R..$).J/.?..:...
 23ff9c0:	cd53 d713 1d15 d5f7 e4b3 f8ca e5f7 cfc9     S...............
 23ff9d0:	c5d1 0f00 1ad7 0132 f4c8 02df fa09 ca2e     ......2.........
 23ff9e0:	ea41 e10c c633 e7cc bf29 df1e 3ffa f2c1     A...3...)....?..
 23ff9f0:	252a 0b2b 08da efb8 23df fe11 b3fe b4bb     *%+......#......
 23ffa00:	3dc0 1e21 100f ee0a 2a08 dc16 afca 36e9     .=!......*.....6
 23ffa10:	3546 08d4 d0ed 25f7 3332 1c03 5459 0c1b     F5.....%23..YT..
 23ffa20:	d91b c2f9 3cb7 01d7 d32a 0b01 fc22 f5f7     .....<..*..."...
 23ffa30:	10f4 e1ff cd49 2103 57a6 cbf1 2d46 2f29     ....I..!.W..F-)/
 23ffa40:	1112 f8ba 5330 2837 d90b fbe7 ecc7 e540     ....0S7(......@.
 23ffa50:	4102 04f1 00d9 c63b 6411 eab7 044d 021b     .A....;..d..M...
 23ffa60:	2631 0a53 2518 2a3e 1916 59d8 0558 e946     1&S..%>*...YX.F.
 23ffa70:	4dea 262e 25cf fa07 3a38 23c9 0344 bf46     .M.&.%..8:.#D.F.
 23ffa80:	b6b6 3ec4 0000 0000 0000 0000 0000 0000     ...>............

023ffa90 <_ZN12_GLOBAL__N_1L12tensor_data2E>:
 23ffa90:	00f2 0000 001d 0000 00a8 0000 0100 0000     ................
 23ffaa0:	ffd0 ffff ff6e ffff 0046 0000 00a2 0000     ....n...F.......
 23ffab0:	ffef ffff ffcb ffff 006b 0000 fff5 ffff     ........k.......
 23ffac0:	002d 0000 009e 0000 002c 0000 ff9c ffff     -.......,.......
 23ffad0:	00b8 0000 0002 0000 00ec 0000 0067 0000     ............g...

023ffae0 <_ZN12_GLOBAL__N_1L12tensor_data3E>:
 23ffae0:	08fb 2751 c73c 2ce3 b8a4 d5fb 5c59 0af6     ..Q'<..,....Y\..
 23ffaf0:	f6e1 241a 06ce 19db 040d d730 c9e2 c406     ...$......0.....
 23ffb00:	e7eb bfc1 2bde be20 31c9 d211 fe37 dc17     .....+ ..1..7...
 23ffb10:	343e d7d2 ba1c ee14 41ea e4be 09d6 e7d3     >4.......A......
 23ffb20:	1afd 4745 da49 1f4c cd11 4701 2723 d71c     ..EGI.L....G#'..
 23ffb30:	0205 bad8 35b7 fce0 43cf b0fb 0cba 09f0     .....5...C......
 23ffb40:	ba07 0a3e 3d22 fcb8 0cd1 e502 b97f 5fad     ..>."=........._
 23ffb50:	2dc5 39df ffaa 35a7 df5b 782d d321 172e     .-.9...5[.-x!...
 23ffb60:	4102 1fde f4cc e5ed 003c eb36 5ee5 a9cf     .A......<.6..^..
 23ffb70:	f7f3 d3f4 4565 4247 f505 e100 1bdb 1ce7     ....eEGB........
 23ffb80:	39ac 14d1 f847 c840 c7f8 3319 3d33 1dfc     .9..G.@....33=..
 23ffb90:	57cb f7d5 02db 3adc 32c1 c943 e22e 29e0     .W.....:.2C....)
 23ffba0:	e4b2 07b8 4751 4fd7 0000 0000 0000 0000     ....QG.O........

023ffbb0 <_ZN12_GLOBAL__N_1L12tensor_data4E>:
 23ffbb0:	0134 0000 ffcf ffff ffaf ffff 007e 0000     4...........~...
 23ffbc0:	ff7d ffff 0046 0000 008a 0000 ffdc ffff     }...F...........
 23ffbd0:	ff86 ffff 001a 0000 0000 0000 0000 0000     ................

023ffbe0 <_ZN12_GLOBAL__N_1L12tensor_data5E>:
 23ffbe0:	c9e6 f2f2 b120 bc03 c7c5 2c2b ce2a 40ba     .... .....+,*..@
 23ffbf0:	1d02 eaf2 218a f513 5248 1238 590f 2ab2     .....!..HR8..Y.*
 23ffc00:	4709 47cf fe09 dc31 3325 fcba 9cf3 9847     .G.G..1.%3....G.
 23ffc10:	e7df fcfb a232 18d7 06a4 2139 03a3 2d19     ....2.....9!...-
 23ffc20:	3b17 434d 0815 162b 6201 bcc1 eeda 294b     .;MC..+..b....K)
 23ffc30:	1fec e11d 2bcf 41d6 abc7 fa75 3ad0 ddca     .....+.A..u..:..
 23ffc40:	a97f 6709 0000 0000 0000 0000 0000 0000     ...g............

023ffc50 <_ZN12_GLOBAL__N_1L12tensor_data6E>:
 23ffc50:	0047 0000 0095 0000 ff5c ffff ffd7 ffff     G.......\.......
 23ffc60:	0116 0000 008c 0000 ff72 ffff ff8c ffff     ........r.......
 23ffc70:	00aa 0000 00e9 0000 0000 0000 0000 0000     ................

023ffc80 <_ZN12_GLOBAL__N_1L12tensor_data7E>:
 23ffc80:	0f1b d3a7 98cd 4a3c b364 81df ae05 9b89     ......<Jd.......
 23ffc90:	1915 f9f1 14cd bab5 ba34 07af fd04 5c1f     ........4......\
 23ffca0:	c02d 1e07 cfe6 97be 0000 0000 0000 0000     -...............

023ffcb0 <_ZN12_GLOBAL__N_1L12tensor_data8E>:
 23ffcb0:	feed ffff ff34 ffff 0160 0000 ffff ffff     ....4...`.......

023ffcc0 <_ZN12_GLOBAL__N_1L13quant10_scaleE>:
 23ffcc0:	0001 0000 28d2 3da0                         .....(.=

023ffcc8 <_ZN12_GLOBAL__N_1L13quant11_scaleE>:
 23ffcc8:	0001 0000 ee53 3d99                         ....S..=

023ffcd0 <_ZN12_GLOBAL__N_1L13quant12_scaleE>:
 23ffcd0:	0001 0000 983c 3dd6                         ....<..=

023ffcd8 <_ZN12_GLOBAL__N_1L13quant13_scaleE>:
 23ffcd8:	0001 0000 0000 3b80                         .......;

023ffce0 <_ZN12_GLOBAL__N_1L17tensor_dimension0E>:
 23ffce0:	0002 0000 0001 0000 0021 0000               ........!...

023ffcec <_ZN12_GLOBAL__N_1L17tensor_dimension1E>:
 23ffcec:	0002 0000 0014 0000 0021 0000               ........!...

023ffcf8 <_ZN12_GLOBAL__N_1L17tensor_dimension2E>:
 23ffcf8:	0001 0000 0014 0000                         ........

023ffd00 <_ZN12_GLOBAL__N_1L17tensor_dimension3E>:
 23ffd00:	0002 0000 000a 0000 0014 0000               ............

023ffd0c <_ZN12_GLOBAL__N_1L17tensor_dimension4E>:
 23ffd0c:	0001 0000 000a 0000                         ........

023ffd14 <_ZN12_GLOBAL__N_1L17tensor_dimension5E>:
 23ffd14:	0002 0000 000a 0000 000a 0000               ............

023ffd20 <_ZN12_GLOBAL__N_1L17tensor_dimension6E>:
 23ffd20:	0001 0000 000a 0000                         ........

023ffd28 <_ZN12_GLOBAL__N_1L17tensor_dimension7E>:
 23ffd28:	0002 0000 0004 0000 000a 0000               ............

023ffd34 <_ZN12_GLOBAL__N_1L17tensor_dimension8E>:
 23ffd34:	0001 0000 0004 0000                         ........

023ffd3c <_ZN12_GLOBAL__N_1L17tensor_dimension9E>:
 23ffd3c:	0002 0000 0001 0000 0014 0000               ............

023ffd48 <_ZN12_GLOBAL__N_1L18tensor_dimension10E>:
 23ffd48:	0002 0000 0001 0000 000a 0000               ............

023ffd54 <_ZN12_GLOBAL__N_1L18tensor_dimension11E>:
 23ffd54:	0002 0000 0001 0000 000a 0000               ............

023ffd60 <_ZN12_GLOBAL__N_1L18tensor_dimension12E>:
 23ffd60:	0002 0000 0001 0000 0004 0000               ............

023ffd6c <_ZN12_GLOBAL__N_1L18tensor_dimension13E>:
 23ffd6c:	0002 0000 0001 0000 0004 0000               ............

023ffd78 <_ZN12_GLOBAL__N_1L6quant0E>:
 23ffd78:	f77c 023f f72c 023f 0000 0000               |.?.,.?.....

023ffd84 <_ZN12_GLOBAL__N_1L6quant1E>:
 23ffd84:	f7a4 023f f734 023f 0000 0000               ..?.4.?.....

023ffd90 <_ZN12_GLOBAL__N_1L6quant2E>:
 23ffd90:	f7ac 023f f73c 023f 0000 0000               ..?.<.?.....

023ffd9c <_ZN12_GLOBAL__N_1L6quant3E>:
 23ffd9c:	f7b4 023f f744 023f 0000 0000               ..?.D.?.....

023ffda8 <_ZN12_GLOBAL__N_1L6quant4E>:
 23ffda8:	f7bc 023f f74c 023f 0000 0000               ..?.L.?.....

023ffdb4 <_ZN12_GLOBAL__N_1L6quant5E>:
 23ffdb4:	f7c4 023f f754 023f 0000 0000               ..?.T.?.....

023ffdc0 <_ZN12_GLOBAL__N_1L6quant6E>:
 23ffdc0:	f7cc 023f f75c 023f 0000 0000               ..?.\.?.....

023ffdcc <_ZN12_GLOBAL__N_1L6quant7E>:
 23ffdcc:	f7d4 023f f764 023f 0000 0000               ..?.d.?.....

023ffdd8 <_ZN12_GLOBAL__N_1L6quant8E>:
 23ffdd8:	f7dc 023f f76c 023f 0000 0000               ..?.l.?.....

023ffde4 <_ZN12_GLOBAL__N_1L6quant9E>:
 23ffde4:	f7e4 023f f774 023f 0000 0000               ..?.t.?.....

023ffdf0 <_ZN12_GLOBAL__N_1L7quant10E>:
 23ffdf0:	fcc0 023f f784 023f 0000 0000               ..?...?.....

023ffdfc <_ZN12_GLOBAL__N_1L7quant11E>:
 23ffdfc:	fcc8 023f f78c 023f 0000 0000               ..?...?.....

023ffe08 <_ZN12_GLOBAL__N_1L7quant12E>:
 23ffe08:	fcd0 023f f794 023f 0000 0000               ..?...?.....

023ffe14 <_ZN12_GLOBAL__N_1L7quant13E>:
 23ffe14:	fcd8 023f f79c 023f 0000 0000               ..?...?.....

023ffe20 <_ZTVN5spark13EthernetClassE>:
	...
 23ffe28:	ed67 023f ed5d 023f ed53 023f ed49 023f     g.?.].?.S.?.I.?.
 23ffe38:	ed3d 023f ed31 023f eec5 023f eecd 023f     =.?.1.?...?...?.
 23ffe48:	ed25 023f ed1d 023f ed13 023f ed09 023f     %.?...?...?...?.
 23ffe58:	eefd 023f                                   ..?.

023ffe5c <_ZTV9IPAddress>:
	...
 23ffe64:	ed95 023f ed85 023f ed87 023f 7061 0070     ..?...?...?.app.

023ffe74 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe7c:	ee85 023f ee8f 023f ee99 023f eea3 023f     ..?...?...?...?.
 23ffe8c:	eead 023f eeb9 023f eec5 023f eecd 023f     ..?...?...?...?.
 23ffe9c:	eed5 023f eee1 023f eee9 023f eef3 023f     ..?...?...?...?.
 23ffeac:	eefd 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffebc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffecc <_ZTV11USARTSerial>:
	...
 23ffed4:	f0c1 023f f12d 023f f105 023f efe9 023f     ..?.-.?...?...?.
 23ffee4:	f0d5 023f f0f1 023f f0e3 023f f0ff 023f     ..?...?...?...?.
 23ffef4:	f0c3 023f f0c7 023f                         ..?...?.

023ffefc <_ZTV9USBSerial>:
	...
 23fff04:	f171 023f f1d9 023f f1af 023f efe9 023f     q.?...?...?...?.
 23fff14:	f1a1 023f f173 023f f183 023f f1d3 023f     ..?.s.?...?...?.
 23fff24:	f193 023f f16b 023f                         ..?.k.?.

023fff2c <_ZTVN5spark9WiFiClassE>:
	...
 23fff34:	f2c7 023f f2bd 023f f2b3 023f f269 023f     ..?...?...?.i.?.
 23fff44:	f2a7 023f f29b 023f eec5 023f eecd 023f     ..?...?...?...?.
 23fff54:	f28f 023f f287 023f f27d 023f f273 023f     ..?...?.}.?.s.?.
 23fff64:	eefd 023f                                   ..?.

023fff68 <_ZSt7nothrow>:
 23fff68:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff78:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff88:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff98:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd9 <link_const_data_end>:
 23fffd9:	00          	.byte	0x00
	...

023fffdc <link_constructors_location>:
 23fffdc:	023fe869 	.word	0x023fe869
 23fffe0:	023fecf9 	.word	0x023fecf9
 23fffe4:	023fed71 	.word	0x023fed71
 23fffe8:	023fee75 	.word	0x023fee75
 23fffec:	023fefd5 	.word	0x023fefd5
 23ffff0:	023ff07d 	.word	0x023ff07d
 23ffff4:	023ff089 	.word	0x023ff089
 23ffff8:	023ff0ad 	.word	0x023ff0ad
 23ffffc:	023ff2d1 	.word	0x023ff2d1
